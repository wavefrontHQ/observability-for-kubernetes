package metricline

type MetricGrammar Peg {
    Histogram bool
    Buckets map[string]string
    currentHistogramCount string
    Name string
    Value string
    Timestamp string
    Tags map[string]string
    currentTag string
}

MetricGrammar <- aggregationInterval (' ' timestamp)? ' ' histogramValues ' ' metricName ' ' tags !. / metricName ' ' metricValue (' ' timestamp)? ' ' tags !.

aggregationInterval <- '!' ('M' / 'H' / 'D') { p.Histogram = true }

histogramValues <- { p.Buckets = map[string]string{} } histogramBucket (' ' histogramBucket)*

histogramBucket <- histogramCount ' ' histogramValue

histogramCount <- '#' <'-'? DIGIT+ ( '.' DIGIT+ )?> { p.currentHistogramCount = text }

histogramValue <- <'-'? DIGIT+ ( '.' DIGIT+ )?> { p.Buckets[text] = p.currentHistogramCount }

tags <- { p.Tags = map[string]string{} } tag ( ' ' tag )*

tag <- tagName '=' tagValue

tagName <- ( '"' <( ALNUM / [/\-_.] )+> '"' /  <( ALNUM / [\-_.] )+> ) { p.currentTag = text }

tagValue <- '"' <( '\\"' / [^"] )+> '"' { p.Tags[p.currentTag] = text }

timestamp <- <DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT (DIGIT DIGIT DIGIT)? (DIGIT DIGIT DIGIT)?>  { p.Timestamp = text }

metricValue <- <'-'? DIGIT+ ( '.' DIGIT+ )?> { p.Value = text }

metricName <- ( '"' <'∆'? '~'? ( ALNUM / [~\-_./,] )+> '"' /  <'∆'? '~'? ( ALNUM / [~\-_./,] )+> ) { p.Name = text }

ALNUM <- [a-zA-Z0-9]

DIGIT <- [0-9]
