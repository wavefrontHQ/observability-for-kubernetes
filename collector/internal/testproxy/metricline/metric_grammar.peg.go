package metricline

// Code generated by peg -switch -inline internal/testproxy/metrics/metric_grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleMetricGrammar
	ruleaggregationInterval
	rulehistogramValues
	rulehistogramBucket
	rulehistogramCount
	rulehistogramValue
	ruletags
	ruletag
	ruletagName
	ruletagValue
	ruletimestamp
	rulemetricValue
	rulemetricName
	ruleALNUM
	ruleDIGIT
	ruleAction0
	ruleAction1
	rulePegText
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
)

var rul3s = [...]string{
	"Unknown",
	"MetricGrammar",
	"aggregationInterval",
	"histogramValues",
	"histogramBucket",
	"histogramCount",
	"histogramValue",
	"tags",
	"tag",
	"tagName",
	"tagValue",
	"timestamp",
	"metricValue",
	"metricName",
	"ALNUM",
	"DIGIT",
	"Action0",
	"Action1",
	"PegText",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type MetricGrammar struct {
	Histogram             bool
	Buckets               map[string]string
	currentHistogramCount string
	Name                  string
	Value                 string
	Timestamp             string
	Tags                  map[string]string
	currentTag            string

	Buffer string
	buffer []rune
	rules  [27]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *MetricGrammar) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *MetricGrammar) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *MetricGrammar
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *MetricGrammar) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *MetricGrammar) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *MetricGrammar) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *MetricGrammar) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.Histogram = true
		case ruleAction1:
			p.Buckets = map[string]string{}
		case ruleAction2:
			p.currentHistogramCount = text
		case ruleAction3:
			p.Buckets[text] = p.currentHistogramCount
		case ruleAction4:
			p.Tags = map[string]string{}
		case ruleAction5:
			p.currentTag = text
		case ruleAction6:
			p.Tags[p.currentTag] = text
		case ruleAction7:
			p.Timestamp = text
		case ruleAction8:
			p.Value = text
		case ruleAction9:
			p.Name = text

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*MetricGrammar) error {
	return func(p *MetricGrammar) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*MetricGrammar) error {
	return func(p *MetricGrammar) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *MetricGrammar) Init(options ...func(*MetricGrammar) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 MetricGrammar <- <((aggregationInterval (' ' timestamp)? ' ' histogramValues ' ' metricName ' ' tags !.) / (metricName ' ' metricValue (' ' timestamp)? ' ' tags !.))> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					{
						position4 := position
						if buffer[position] != rune('!') {
							goto l3
						}
						position++
						{
							switch buffer[position] {
							case 'D':
								if buffer[position] != rune('D') {
									goto l3
								}
								position++
							case 'H':
								if buffer[position] != rune('H') {
									goto l3
								}
								position++
							default:
								if buffer[position] != rune('M') {
									goto l3
								}
								position++
							}
						}

						{
							add(ruleAction0, position)
						}
						add(ruleaggregationInterval, position4)
					}
					{
						position7, tokenIndex7 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l7
						}
						position++
						if !_rules[ruletimestamp]() {
							goto l7
						}
						goto l8
					l7:
						position, tokenIndex = position7, tokenIndex7
					}
				l8:
					if buffer[position] != rune(' ') {
						goto l3
					}
					position++
					{
						position9 := position
						{
							add(ruleAction1, position)
						}
						if !_rules[rulehistogramBucket]() {
							goto l3
						}
					l11:
						{
							position12, tokenIndex12 := position, tokenIndex
							if buffer[position] != rune(' ') {
								goto l12
							}
							position++
							if !_rules[rulehistogramBucket]() {
								goto l12
							}
							goto l11
						l12:
							position, tokenIndex = position12, tokenIndex12
						}
						add(rulehistogramValues, position9)
					}
					if buffer[position] != rune(' ') {
						goto l3
					}
					position++
					if !_rules[rulemetricName]() {
						goto l3
					}
					if buffer[position] != rune(' ') {
						goto l3
					}
					position++
					if !_rules[ruletags]() {
						goto l3
					}
					{
						position13, tokenIndex13 := position, tokenIndex
						if !matchDot() {
							goto l13
						}
						goto l3
					l13:
						position, tokenIndex = position13, tokenIndex13
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					if !_rules[rulemetricName]() {
						goto l0
					}
					if buffer[position] != rune(' ') {
						goto l0
					}
					position++
					{
						position14 := position
						{
							position15 := position
							{
								position16, tokenIndex16 := position, tokenIndex
								if buffer[position] != rune('-') {
									goto l16
								}
								position++
								goto l17
							l16:
								position, tokenIndex = position16, tokenIndex16
							}
						l17:
							if !_rules[ruleDIGIT]() {
								goto l0
							}
						l18:
							{
								position19, tokenIndex19 := position, tokenIndex
								if !_rules[ruleDIGIT]() {
									goto l19
								}
								goto l18
							l19:
								position, tokenIndex = position19, tokenIndex19
							}
							{
								position20, tokenIndex20 := position, tokenIndex
								if buffer[position] != rune('.') {
									goto l20
								}
								position++
								if !_rules[ruleDIGIT]() {
									goto l20
								}
							l22:
								{
									position23, tokenIndex23 := position, tokenIndex
									if !_rules[ruleDIGIT]() {
										goto l23
									}
									goto l22
								l23:
									position, tokenIndex = position23, tokenIndex23
								}
								goto l21
							l20:
								position, tokenIndex = position20, tokenIndex20
							}
						l21:
							add(rulePegText, position15)
						}
						{
							add(ruleAction8, position)
						}
						add(rulemetricValue, position14)
					}
					{
						position25, tokenIndex25 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l25
						}
						position++
						if !_rules[ruletimestamp]() {
							goto l25
						}
						goto l26
					l25:
						position, tokenIndex = position25, tokenIndex25
					}
				l26:
					if buffer[position] != rune(' ') {
						goto l0
					}
					position++
					if !_rules[ruletags]() {
						goto l0
					}
					{
						position27, tokenIndex27 := position, tokenIndex
						if !matchDot() {
							goto l27
						}
						goto l0
					l27:
						position, tokenIndex = position27, tokenIndex27
					}
				}
			l2:
				add(ruleMetricGrammar, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 aggregationInterval <- <('!' ((&('D') 'D') | (&('H') 'H') | (&('M') 'M')) Action0)> */
		nil,
		/* 2 histogramValues <- <(Action1 histogramBucket (' ' histogramBucket)*)> */
		nil,
		/* 3 histogramBucket <- <(histogramCount ' ' histogramValue)> */
		func() bool {
			position30, tokenIndex30 := position, tokenIndex
			{
				position31 := position
				{
					position32 := position
					if buffer[position] != rune('#') {
						goto l30
					}
					position++
					{
						position33 := position
						{
							position34, tokenIndex34 := position, tokenIndex
							if buffer[position] != rune('-') {
								goto l34
							}
							position++
							goto l35
						l34:
							position, tokenIndex = position34, tokenIndex34
						}
					l35:
						if !_rules[ruleDIGIT]() {
							goto l30
						}
					l36:
						{
							position37, tokenIndex37 := position, tokenIndex
							if !_rules[ruleDIGIT]() {
								goto l37
							}
							goto l36
						l37:
							position, tokenIndex = position37, tokenIndex37
						}
						{
							position38, tokenIndex38 := position, tokenIndex
							if buffer[position] != rune('.') {
								goto l38
							}
							position++
							if !_rules[ruleDIGIT]() {
								goto l38
							}
						l40:
							{
								position41, tokenIndex41 := position, tokenIndex
								if !_rules[ruleDIGIT]() {
									goto l41
								}
								goto l40
							l41:
								position, tokenIndex = position41, tokenIndex41
							}
							goto l39
						l38:
							position, tokenIndex = position38, tokenIndex38
						}
					l39:
						add(rulePegText, position33)
					}
					{
						add(ruleAction2, position)
					}
					add(rulehistogramCount, position32)
				}
				if buffer[position] != rune(' ') {
					goto l30
				}
				position++
				{
					position43 := position
					{
						position44 := position
						{
							position45, tokenIndex45 := position, tokenIndex
							if buffer[position] != rune('-') {
								goto l45
							}
							position++
							goto l46
						l45:
							position, tokenIndex = position45, tokenIndex45
						}
					l46:
						if !_rules[ruleDIGIT]() {
							goto l30
						}
					l47:
						{
							position48, tokenIndex48 := position, tokenIndex
							if !_rules[ruleDIGIT]() {
								goto l48
							}
							goto l47
						l48:
							position, tokenIndex = position48, tokenIndex48
						}
						{
							position49, tokenIndex49 := position, tokenIndex
							if buffer[position] != rune('.') {
								goto l49
							}
							position++
							if !_rules[ruleDIGIT]() {
								goto l49
							}
						l51:
							{
								position52, tokenIndex52 := position, tokenIndex
								if !_rules[ruleDIGIT]() {
									goto l52
								}
								goto l51
							l52:
								position, tokenIndex = position52, tokenIndex52
							}
							goto l50
						l49:
							position, tokenIndex = position49, tokenIndex49
						}
					l50:
						add(rulePegText, position44)
					}
					{
						add(ruleAction3, position)
					}
					add(rulehistogramValue, position43)
				}
				add(rulehistogramBucket, position31)
			}
			return true
		l30:
			position, tokenIndex = position30, tokenIndex30
			return false
		},
		/* 4 histogramCount <- <('#' <('-'? DIGIT+ ('.' DIGIT+)?)> Action2)> */
		nil,
		/* 5 histogramValue <- <(<('-'? DIGIT+ ('.' DIGIT+)?)> Action3)> */
		nil,
		/* 6 tags <- <(Action4 tag (' ' tag)*)> */
		func() bool {
			position56, tokenIndex56 := position, tokenIndex
			{
				position57 := position
				{
					add(ruleAction4, position)
				}
				if !_rules[ruletag]() {
					goto l56
				}
			l59:
				{
					position60, tokenIndex60 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l60
					}
					position++
					if !_rules[ruletag]() {
						goto l60
					}
					goto l59
				l60:
					position, tokenIndex = position60, tokenIndex60
				}
				add(ruletags, position57)
			}
			return true
		l56:
			position, tokenIndex = position56, tokenIndex56
			return false
		},
		/* 7 tag <- <(tagName '=' tagValue)> */
		func() bool {
			position61, tokenIndex61 := position, tokenIndex
			{
				position62 := position
				{
					position63 := position
					{
						position64, tokenIndex64 := position, tokenIndex
						if buffer[position] != rune('"') {
							goto l65
						}
						position++
						{
							position66 := position
							{
								position69, tokenIndex69 := position, tokenIndex
								if !_rules[ruleALNUM]() {
									goto l70
								}
								goto l69
							l70:
								position, tokenIndex = position69, tokenIndex69
								{
									switch buffer[position] {
									case '.':
										if buffer[position] != rune('.') {
											goto l65
										}
										position++
									case '_':
										if buffer[position] != rune('_') {
											goto l65
										}
										position++
									case '-':
										if buffer[position] != rune('-') {
											goto l65
										}
										position++
									default:
										if buffer[position] != rune('/') {
											goto l65
										}
										position++
									}
								}

							}
						l69:
						l67:
							{
								position68, tokenIndex68 := position, tokenIndex
								{
									position72, tokenIndex72 := position, tokenIndex
									if !_rules[ruleALNUM]() {
										goto l73
									}
									goto l72
								l73:
									position, tokenIndex = position72, tokenIndex72
									{
										switch buffer[position] {
										case '.':
											if buffer[position] != rune('.') {
												goto l68
											}
											position++
										case '_':
											if buffer[position] != rune('_') {
												goto l68
											}
											position++
										case '-':
											if buffer[position] != rune('-') {
												goto l68
											}
											position++
										default:
											if buffer[position] != rune('/') {
												goto l68
											}
											position++
										}
									}

								}
							l72:
								goto l67
							l68:
								position, tokenIndex = position68, tokenIndex68
							}
							add(rulePegText, position66)
						}
						if buffer[position] != rune('"') {
							goto l65
						}
						position++
						goto l64
					l65:
						position, tokenIndex = position64, tokenIndex64
						{
							position75 := position
							{
								position78, tokenIndex78 := position, tokenIndex
								if !_rules[ruleALNUM]() {
									goto l79
								}
								goto l78
							l79:
								position, tokenIndex = position78, tokenIndex78
								{
									switch buffer[position] {
									case '.':
										if buffer[position] != rune('.') {
											goto l61
										}
										position++
									case '_':
										if buffer[position] != rune('_') {
											goto l61
										}
										position++
									default:
										if buffer[position] != rune('-') {
											goto l61
										}
										position++
									}
								}

							}
						l78:
						l76:
							{
								position77, tokenIndex77 := position, tokenIndex
								{
									position81, tokenIndex81 := position, tokenIndex
									if !_rules[ruleALNUM]() {
										goto l82
									}
									goto l81
								l82:
									position, tokenIndex = position81, tokenIndex81
									{
										switch buffer[position] {
										case '.':
											if buffer[position] != rune('.') {
												goto l77
											}
											position++
										case '_':
											if buffer[position] != rune('_') {
												goto l77
											}
											position++
										default:
											if buffer[position] != rune('-') {
												goto l77
											}
											position++
										}
									}

								}
							l81:
								goto l76
							l77:
								position, tokenIndex = position77, tokenIndex77
							}
							add(rulePegText, position75)
						}
					}
				l64:
					{
						add(ruleAction5, position)
					}
					add(ruletagName, position63)
				}
				if buffer[position] != rune('=') {
					goto l61
				}
				position++
				{
					position85 := position
					if buffer[position] != rune('"') {
						goto l61
					}
					position++
					{
						position86 := position
						{
							position89, tokenIndex89 := position, tokenIndex
							if buffer[position] != rune('\\') {
								goto l90
							}
							position++
							if buffer[position] != rune('"') {
								goto l90
							}
							position++
							goto l89
						l90:
							position, tokenIndex = position89, tokenIndex89
							{
								position91, tokenIndex91 := position, tokenIndex
								if buffer[position] != rune('"') {
									goto l91
								}
								position++
								goto l61
							l91:
								position, tokenIndex = position91, tokenIndex91
							}
							if !matchDot() {
								goto l61
							}
						}
					l89:
					l87:
						{
							position88, tokenIndex88 := position, tokenIndex
							{
								position92, tokenIndex92 := position, tokenIndex
								if buffer[position] != rune('\\') {
									goto l93
								}
								position++
								if buffer[position] != rune('"') {
									goto l93
								}
								position++
								goto l92
							l93:
								position, tokenIndex = position92, tokenIndex92
								{
									position94, tokenIndex94 := position, tokenIndex
									if buffer[position] != rune('"') {
										goto l94
									}
									position++
									goto l88
								l94:
									position, tokenIndex = position94, tokenIndex94
								}
								if !matchDot() {
									goto l88
								}
							}
						l92:
							goto l87
						l88:
							position, tokenIndex = position88, tokenIndex88
						}
						add(rulePegText, position86)
					}
					if buffer[position] != rune('"') {
						goto l61
					}
					position++
					{
						add(ruleAction6, position)
					}
					add(ruletagValue, position85)
				}
				add(ruletag, position62)
			}
			return true
		l61:
			position, tokenIndex = position61, tokenIndex61
			return false
		},
		/* 8 tagName <- <((('"' <(ALNUM / ((&('.') '.') | (&('_') '_') | (&('-') '-') | (&('/') '/')))+> '"') / <(ALNUM / ((&('.') '.') | (&('_') '_') | (&('-') '-')))+>) Action5)> */
		nil,
		/* 9 tagValue <- <('"' <(('\\' '"') / (!'"' .))+> '"' Action6)> */
		nil,
		/* 10 timestamp <- <(<(DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT (DIGIT DIGIT DIGIT)? (DIGIT DIGIT DIGIT)?)> Action7)> */
		func() bool {
			position98, tokenIndex98 := position, tokenIndex
			{
				position99 := position
				{
					position100 := position
					if !_rules[ruleDIGIT]() {
						goto l98
					}
					if !_rules[ruleDIGIT]() {
						goto l98
					}
					if !_rules[ruleDIGIT]() {
						goto l98
					}
					if !_rules[ruleDIGIT]() {
						goto l98
					}
					if !_rules[ruleDIGIT]() {
						goto l98
					}
					if !_rules[ruleDIGIT]() {
						goto l98
					}
					if !_rules[ruleDIGIT]() {
						goto l98
					}
					if !_rules[ruleDIGIT]() {
						goto l98
					}
					if !_rules[ruleDIGIT]() {
						goto l98
					}
					if !_rules[ruleDIGIT]() {
						goto l98
					}
					{
						position101, tokenIndex101 := position, tokenIndex
						if !_rules[ruleDIGIT]() {
							goto l101
						}
						if !_rules[ruleDIGIT]() {
							goto l101
						}
						if !_rules[ruleDIGIT]() {
							goto l101
						}
						goto l102
					l101:
						position, tokenIndex = position101, tokenIndex101
					}
				l102:
					{
						position103, tokenIndex103 := position, tokenIndex
						if !_rules[ruleDIGIT]() {
							goto l103
						}
						if !_rules[ruleDIGIT]() {
							goto l103
						}
						if !_rules[ruleDIGIT]() {
							goto l103
						}
						goto l104
					l103:
						position, tokenIndex = position103, tokenIndex103
					}
				l104:
					add(rulePegText, position100)
				}
				{
					add(ruleAction7, position)
				}
				add(ruletimestamp, position99)
			}
			return true
		l98:
			position, tokenIndex = position98, tokenIndex98
			return false
		},
		/* 11 metricValue <- <(<('-'? DIGIT+ ('.' DIGIT+)?)> Action8)> */
		nil,
		/* 12 metricName <- <((('"' <('∆'? '~'? (ALNUM / ((&(',') ',') | (&('/') '/') | (&('.') '.') | (&('_') '_') | (&('-') '-') | (&('~') '~')))+)> '"') / <('∆'? '~'? (ALNUM / ((&(',') ',') | (&('/') '/') | (&('.') '.') | (&('_') '_') | (&('-') '-') | (&('~') '~')))+)>) Action9)> */
		func() bool {
			position107, tokenIndex107 := position, tokenIndex
			{
				position108 := position
				{
					position109, tokenIndex109 := position, tokenIndex
					if buffer[position] != rune('"') {
						goto l110
					}
					position++
					{
						position111 := position
						{
							position112, tokenIndex112 := position, tokenIndex
							if buffer[position] != rune('∆') {
								goto l112
							}
							position++
							goto l113
						l112:
							position, tokenIndex = position112, tokenIndex112
						}
					l113:
						{
							position114, tokenIndex114 := position, tokenIndex
							if buffer[position] != rune('~') {
								goto l114
							}
							position++
							goto l115
						l114:
							position, tokenIndex = position114, tokenIndex114
						}
					l115:
						{
							position118, tokenIndex118 := position, tokenIndex
							if !_rules[ruleALNUM]() {
								goto l119
							}
							goto l118
						l119:
							position, tokenIndex = position118, tokenIndex118
							{
								switch buffer[position] {
								case ',':
									if buffer[position] != rune(',') {
										goto l110
									}
									position++
								case '/':
									if buffer[position] != rune('/') {
										goto l110
									}
									position++
								case '.':
									if buffer[position] != rune('.') {
										goto l110
									}
									position++
								case '_':
									if buffer[position] != rune('_') {
										goto l110
									}
									position++
								case '-':
									if buffer[position] != rune('-') {
										goto l110
									}
									position++
								default:
									if buffer[position] != rune('~') {
										goto l110
									}
									position++
								}
							}

						}
					l118:
					l116:
						{
							position117, tokenIndex117 := position, tokenIndex
							{
								position121, tokenIndex121 := position, tokenIndex
								if !_rules[ruleALNUM]() {
									goto l122
								}
								goto l121
							l122:
								position, tokenIndex = position121, tokenIndex121
								{
									switch buffer[position] {
									case ',':
										if buffer[position] != rune(',') {
											goto l117
										}
										position++
									case '/':
										if buffer[position] != rune('/') {
											goto l117
										}
										position++
									case '.':
										if buffer[position] != rune('.') {
											goto l117
										}
										position++
									case '_':
										if buffer[position] != rune('_') {
											goto l117
										}
										position++
									case '-':
										if buffer[position] != rune('-') {
											goto l117
										}
										position++
									default:
										if buffer[position] != rune('~') {
											goto l117
										}
										position++
									}
								}

							}
						l121:
							goto l116
						l117:
							position, tokenIndex = position117, tokenIndex117
						}
						add(rulePegText, position111)
					}
					if buffer[position] != rune('"') {
						goto l110
					}
					position++
					goto l109
				l110:
					position, tokenIndex = position109, tokenIndex109
					{
						position124 := position
						{
							position125, tokenIndex125 := position, tokenIndex
							if buffer[position] != rune('∆') {
								goto l125
							}
							position++
							goto l126
						l125:
							position, tokenIndex = position125, tokenIndex125
						}
					l126:
						{
							position127, tokenIndex127 := position, tokenIndex
							if buffer[position] != rune('~') {
								goto l127
							}
							position++
							goto l128
						l127:
							position, tokenIndex = position127, tokenIndex127
						}
					l128:
						{
							position131, tokenIndex131 := position, tokenIndex
							if !_rules[ruleALNUM]() {
								goto l132
							}
							goto l131
						l132:
							position, tokenIndex = position131, tokenIndex131
							{
								switch buffer[position] {
								case ',':
									if buffer[position] != rune(',') {
										goto l107
									}
									position++
								case '/':
									if buffer[position] != rune('/') {
										goto l107
									}
									position++
								case '.':
									if buffer[position] != rune('.') {
										goto l107
									}
									position++
								case '_':
									if buffer[position] != rune('_') {
										goto l107
									}
									position++
								case '-':
									if buffer[position] != rune('-') {
										goto l107
									}
									position++
								default:
									if buffer[position] != rune('~') {
										goto l107
									}
									position++
								}
							}

						}
					l131:
					l129:
						{
							position130, tokenIndex130 := position, tokenIndex
							{
								position134, tokenIndex134 := position, tokenIndex
								if !_rules[ruleALNUM]() {
									goto l135
								}
								goto l134
							l135:
								position, tokenIndex = position134, tokenIndex134
								{
									switch buffer[position] {
									case ',':
										if buffer[position] != rune(',') {
											goto l130
										}
										position++
									case '/':
										if buffer[position] != rune('/') {
											goto l130
										}
										position++
									case '.':
										if buffer[position] != rune('.') {
											goto l130
										}
										position++
									case '_':
										if buffer[position] != rune('_') {
											goto l130
										}
										position++
									case '-':
										if buffer[position] != rune('-') {
											goto l130
										}
										position++
									default:
										if buffer[position] != rune('~') {
											goto l130
										}
										position++
									}
								}

							}
						l134:
							goto l129
						l130:
							position, tokenIndex = position130, tokenIndex130
						}
						add(rulePegText, position124)
					}
				}
			l109:
				{
					add(ruleAction9, position)
				}
				add(rulemetricName, position108)
			}
			return true
		l107:
			position, tokenIndex = position107, tokenIndex107
			return false
		},
		/* 13 ALNUM <- <((&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))> */
		func() bool {
			position138, tokenIndex138 := position, tokenIndex
			{
				position139 := position
				{
					switch buffer[position] {
					case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l138
						}
						position++
					case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l138
						}
						position++
					default:
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l138
						}
						position++
					}
				}

				add(ruleALNUM, position139)
			}
			return true
		l138:
			position, tokenIndex = position138, tokenIndex138
			return false
		},
		/* 14 DIGIT <- <[0-9]> */
		func() bool {
			position141, tokenIndex141 := position, tokenIndex
			{
				position142 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l141
				}
				position++
				add(ruleDIGIT, position142)
			}
			return true
		l141:
			position, tokenIndex = position141, tokenIndex141
			return false
		},
		/* 16 Action0 <- <{ p.Histogram = true }> */
		nil,
		/* 17 Action1 <- <{ p.Buckets = map[string]string{} }> */
		nil,
		nil,
		/* 19 Action2 <- <{ p.currentHistogramCount = text }> */
		nil,
		/* 20 Action3 <- <{ p.Buckets[text] = p.currentHistogramCount }> */
		nil,
		/* 21 Action4 <- <{ p.Tags = map[string]string{} }> */
		nil,
		/* 22 Action5 <- <{ p.currentTag = text }> */
		nil,
		/* 23 Action6 <- <{ p.Tags[p.currentTag] = text }> */
		nil,
		/* 24 Action7 <- <{ p.Timestamp = text }> */
		nil,
		/* 25 Action8 <- <{ p.Value = text }> */
		nil,
		/* 26 Action9 <- <{ p.Name = text }> */
		nil,
	}
	p.rules = _rules
	return nil
}
