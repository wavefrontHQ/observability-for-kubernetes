package eventline

// Code generated by peg -switch -inline /Users/warshawd/workspace/wavefrontHQ/observability-for-kubernetes/collector/internal/testproxy/events/event_grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleEventGrammar
	ruleeventName
	ruleendMillis
	rulestartMillis
	ruletimestamp
	ruleannotationsOrTags
	ruleannotation
	ruleannotationValue
	ruletag
	ruletagValue
	ruleNAMERUNE
	ruleALNUM
	ruleDIGIT
	ruleEND
	rulePegText
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
)

var rul3s = [...]string{
	"Unknown",
	"EventGrammar",
	"eventName",
	"endMillis",
	"startMillis",
	"timestamp",
	"annotationsOrTags",
	"annotation",
	"annotationValue",
	"tag",
	"tagValue",
	"NAMERUNE",
	"ALNUM",
	"DIGIT",
	"END",
	"PegText",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type EventGrammar struct {
	Name         string
	EndMillis    string
	StartMillis  string
	Annotations  map[string]string
	Tags         map[string]string
	currentKey   string
	currentValue string

	Buffer string
	buffer []rune
	rules  [31]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *EventGrammar) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *EventGrammar) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *EventGrammar
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *EventGrammar) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *EventGrammar) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *EventGrammar) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *EventGrammar) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.Name = text
		case ruleAction1:
			p.EndMillis = text
		case ruleAction2:
			p.StartMillis = text
		case ruleAction3:
			p.Annotations = map[string]string{}
		case ruleAction4:
			p.Tags = map[string]string{}
		case ruleAction5:
			p.currentKey = text
		case ruleAction6:
			p.Annotations[p.currentKey] = p.currentValue
		case ruleAction7:
			p.currentValue = ""
		case ruleAction8:
			p.currentValue += "\""
		case ruleAction9:
			p.currentValue += text
		case ruleAction10:
			p.currentKey = text
		case ruleAction11:
			p.Tags[p.currentKey] = p.currentValue
		case ruleAction12:
			p.currentValue = ""
		case ruleAction13:
			p.currentValue += "\""
		case ruleAction14:
			p.currentValue += text

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*EventGrammar) error {
	return func(p *EventGrammar) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*EventGrammar) error {
	return func(p *EventGrammar) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *EventGrammar) Init(options ...func(*EventGrammar) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 EventGrammar <- <('@' 'E' 'v' 'e' 'n' 't' ' ' startMillis ' ' endMillis ' ' eventName ' ' annotationsOrTags END)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if buffer[position] != rune('@') {
					goto l0
				}
				position++
				if buffer[position] != rune('E') {
					goto l0
				}
				position++
				if buffer[position] != rune('v') {
					goto l0
				}
				position++
				if buffer[position] != rune('e') {
					goto l0
				}
				position++
				if buffer[position] != rune('n') {
					goto l0
				}
				position++
				if buffer[position] != rune('t') {
					goto l0
				}
				position++
				if buffer[position] != rune(' ') {
					goto l0
				}
				position++
				{
					position2 := position
					{
						position3 := position
						if !_rules[ruletimestamp]() {
							goto l0
						}
						add(rulePegText, position3)
					}
					{
						add(ruleAction2, position)
					}
					add(rulestartMillis, position2)
				}
				if buffer[position] != rune(' ') {
					goto l0
				}
				position++
				{
					position5 := position
					{
						position6 := position
						if !_rules[ruletimestamp]() {
							goto l0
						}
						add(rulePegText, position6)
					}
					{
						add(ruleAction1, position)
					}
					add(ruleendMillis, position5)
				}
				if buffer[position] != rune(' ') {
					goto l0
				}
				position++
				{
					position8 := position
					{
						position9, tokenIndex9 := position, tokenIndex
						if buffer[position] != rune('"') {
							goto l10
						}
						position++
						{
							position11 := position
							if !_rules[ruleNAMERUNE]() {
								goto l10
							}
						l12:
							{
								position13, tokenIndex13 := position, tokenIndex
								if !_rules[ruleNAMERUNE]() {
									goto l13
								}
								goto l12
							l13:
								position, tokenIndex = position13, tokenIndex13
							}
							add(rulePegText, position11)
						}
						if buffer[position] != rune('"') {
							goto l10
						}
						position++
						goto l9
					l10:
						position, tokenIndex = position9, tokenIndex9
						{
							position14 := position
							if !_rules[ruleNAMERUNE]() {
								goto l0
							}
						l15:
							{
								position16, tokenIndex16 := position, tokenIndex
								if !_rules[ruleNAMERUNE]() {
									goto l16
								}
								goto l15
							l16:
								position, tokenIndex = position16, tokenIndex16
							}
							add(rulePegText, position14)
						}
					}
				l9:
					{
						add(ruleAction0, position)
					}
					add(ruleeventName, position8)
				}
				if buffer[position] != rune(' ') {
					goto l0
				}
				position++
				{
					position18 := position
					{
						add(ruleAction3, position)
					}
					{
						add(ruleAction4, position)
					}
					{
						position21, tokenIndex21 := position, tokenIndex
						if !_rules[ruletag]() {
							goto l22
						}
						goto l21
					l22:
						position, tokenIndex = position21, tokenIndex21
						if !_rules[ruleannotation]() {
							goto l0
						}
					}
				l21:
				l23:
					{
						position24, tokenIndex24 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l24
						}
						position++
						{
							position25, tokenIndex25 := position, tokenIndex
							if !_rules[ruletag]() {
								goto l26
							}
							goto l25
						l26:
							position, tokenIndex = position25, tokenIndex25
							if !_rules[ruleannotation]() {
								goto l24
							}
						}
					l25:
						goto l23
					l24:
						position, tokenIndex = position24, tokenIndex24
					}
					add(ruleannotationsOrTags, position18)
				}
				{
					position27 := position
					{
						position28, tokenIndex28 := position, tokenIndex
						if !matchDot() {
							goto l28
						}
						goto l0
					l28:
						position, tokenIndex = position28, tokenIndex28
					}
					add(ruleEND, position27)
				}
				add(ruleEventGrammar, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 eventName <- <((('"' <NAMERUNE+> '"') / <NAMERUNE+>) Action0)> */
		nil,
		/* 2 endMillis <- <(<timestamp> Action1)> */
		nil,
		/* 3 startMillis <- <(<timestamp> Action2)> */
		nil,
		/* 4 timestamp <- <DIGIT+> */
		func() bool {
			position32, tokenIndex32 := position, tokenIndex
			{
				position33 := position
				{
					position36 := position
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l32
					}
					position++
					add(ruleDIGIT, position36)
				}
			l34:
				{
					position35, tokenIndex35 := position, tokenIndex
					{
						position37 := position
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l35
						}
						position++
						add(ruleDIGIT, position37)
					}
					goto l34
				l35:
					position, tokenIndex = position35, tokenIndex35
				}
				add(ruletimestamp, position33)
			}
			return true
		l32:
			position, tokenIndex = position32, tokenIndex32
			return false
		},
		/* 5 annotationsOrTags <- <(Action3 Action4 (tag / annotation) (' ' (tag / annotation))*)> */
		nil,
		/* 6 annotation <- <(<NAMERUNE+> Action5 '=' annotationValue Action6)> */
		func() bool {
			position39, tokenIndex39 := position, tokenIndex
			{
				position40 := position
				{
					position41 := position
					if !_rules[ruleNAMERUNE]() {
						goto l39
					}
				l42:
					{
						position43, tokenIndex43 := position, tokenIndex
						if !_rules[ruleNAMERUNE]() {
							goto l43
						}
						goto l42
					l43:
						position, tokenIndex = position43, tokenIndex43
					}
					add(rulePegText, position41)
				}
				{
					add(ruleAction5, position)
				}
				if buffer[position] != rune('=') {
					goto l39
				}
				position++
				{
					position45 := position
					{
						add(ruleAction7, position)
					}
					if buffer[position] != rune('"') {
						goto l39
					}
					position++
					{
						position49, tokenIndex49 := position, tokenIndex
						if buffer[position] != rune('\\') {
							goto l50
						}
						position++
						if buffer[position] != rune('"') {
							goto l50
						}
						position++
						{
							add(ruleAction8, position)
						}
						goto l49
					l50:
						position, tokenIndex = position49, tokenIndex49
						{
							position52 := position
							{
								position53, tokenIndex53 := position, tokenIndex
								if buffer[position] != rune('"') {
									goto l53
								}
								position++
								goto l39
							l53:
								position, tokenIndex = position53, tokenIndex53
							}
							if !matchDot() {
								goto l39
							}
							add(rulePegText, position52)
						}
						{
							add(ruleAction9, position)
						}
					}
				l49:
				l47:
					{
						position48, tokenIndex48 := position, tokenIndex
						{
							position55, tokenIndex55 := position, tokenIndex
							if buffer[position] != rune('\\') {
								goto l56
							}
							position++
							if buffer[position] != rune('"') {
								goto l56
							}
							position++
							{
								add(ruleAction8, position)
							}
							goto l55
						l56:
							position, tokenIndex = position55, tokenIndex55
							{
								position58 := position
								{
									position59, tokenIndex59 := position, tokenIndex
									if buffer[position] != rune('"') {
										goto l59
									}
									position++
									goto l48
								l59:
									position, tokenIndex = position59, tokenIndex59
								}
								if !matchDot() {
									goto l48
								}
								add(rulePegText, position58)
							}
							{
								add(ruleAction9, position)
							}
						}
					l55:
						goto l47
					l48:
						position, tokenIndex = position48, tokenIndex48
					}
					if buffer[position] != rune('"') {
						goto l39
					}
					position++
					add(ruleannotationValue, position45)
				}
				{
					add(ruleAction6, position)
				}
				add(ruleannotation, position40)
			}
			return true
		l39:
			position, tokenIndex = position39, tokenIndex39
			return false
		},
		/* 7 annotationValue <- <(Action7 '"' (('\\' '"' Action8) / (<(!'"' .)> Action9))+ '"')> */
		nil,
		/* 8 tag <- <('t' 'a' 'g' '=' '"' '\\' '"' <NAMERUNE+> ('\\' '"' ':' ' ') Action10 tagValue '"' Action11)> */
		func() bool {
			position63, tokenIndex63 := position, tokenIndex
			{
				position64 := position
				if buffer[position] != rune('t') {
					goto l63
				}
				position++
				if buffer[position] != rune('a') {
					goto l63
				}
				position++
				if buffer[position] != rune('g') {
					goto l63
				}
				position++
				if buffer[position] != rune('=') {
					goto l63
				}
				position++
				if buffer[position] != rune('"') {
					goto l63
				}
				position++
				if buffer[position] != rune('\\') {
					goto l63
				}
				position++
				if buffer[position] != rune('"') {
					goto l63
				}
				position++
				{
					position65 := position
					if !_rules[ruleNAMERUNE]() {
						goto l63
					}
				l66:
					{
						position67, tokenIndex67 := position, tokenIndex
						if !_rules[ruleNAMERUNE]() {
							goto l67
						}
						goto l66
					l67:
						position, tokenIndex = position67, tokenIndex67
					}
					add(rulePegText, position65)
				}
				if buffer[position] != rune('\\') {
					goto l63
				}
				position++
				if buffer[position] != rune('"') {
					goto l63
				}
				position++
				if buffer[position] != rune(':') {
					goto l63
				}
				position++
				if buffer[position] != rune(' ') {
					goto l63
				}
				position++
				{
					add(ruleAction10, position)
				}
				{
					position69 := position
					{
						add(ruleAction12, position)
					}
					if buffer[position] != rune('\\') {
						goto l63
					}
					position++
					if buffer[position] != rune('"') {
						goto l63
					}
					position++
					{
						position73, tokenIndex73 := position, tokenIndex
						if buffer[position] != rune('\\') {
							goto l74
						}
						position++
						if buffer[position] != rune('\\') {
							goto l74
						}
						position++
						if buffer[position] != rune('"') {
							goto l74
						}
						position++
						{
							add(ruleAction13, position)
						}
						goto l73
					l74:
						position, tokenIndex = position73, tokenIndex73
						{
							position76 := position
							{
								position77, tokenIndex77 := position, tokenIndex
								if buffer[position] != rune('\\') {
									goto l77
								}
								position++
								goto l63
							l77:
								position, tokenIndex = position77, tokenIndex77
							}
							if !matchDot() {
								goto l63
							}
							{
								position78, tokenIndex78 := position, tokenIndex
								if buffer[position] != rune('"') {
									goto l78
								}
								position++
								goto l63
							l78:
								position, tokenIndex = position78, tokenIndex78
							}
							if !matchDot() {
								goto l63
							}
							add(rulePegText, position76)
						}
						{
							add(ruleAction14, position)
						}
					}
				l73:
				l71:
					{
						position72, tokenIndex72 := position, tokenIndex
						{
							position80, tokenIndex80 := position, tokenIndex
							if buffer[position] != rune('\\') {
								goto l81
							}
							position++
							if buffer[position] != rune('\\') {
								goto l81
							}
							position++
							if buffer[position] != rune('"') {
								goto l81
							}
							position++
							{
								add(ruleAction13, position)
							}
							goto l80
						l81:
							position, tokenIndex = position80, tokenIndex80
							{
								position83 := position
								{
									position84, tokenIndex84 := position, tokenIndex
									if buffer[position] != rune('\\') {
										goto l84
									}
									position++
									goto l72
								l84:
									position, tokenIndex = position84, tokenIndex84
								}
								if !matchDot() {
									goto l72
								}
								{
									position85, tokenIndex85 := position, tokenIndex
									if buffer[position] != rune('"') {
										goto l85
									}
									position++
									goto l72
								l85:
									position, tokenIndex = position85, tokenIndex85
								}
								if !matchDot() {
									goto l72
								}
								add(rulePegText, position83)
							}
							{
								add(ruleAction14, position)
							}
						}
					l80:
						goto l71
					l72:
						position, tokenIndex = position72, tokenIndex72
					}
					if buffer[position] != rune('\\') {
						goto l63
					}
					position++
					if buffer[position] != rune('"') {
						goto l63
					}
					position++
					add(ruletagValue, position69)
				}
				if buffer[position] != rune('"') {
					goto l63
				}
				position++
				{
					add(ruleAction11, position)
				}
				add(ruletag, position64)
			}
			return true
		l63:
			position, tokenIndex = position63, tokenIndex63
			return false
		},
		/* 9 tagValue <- <(Action12 ('\\' '"') (('\\' '\\' '"' Action13) / (<(!'\\' . (!'"' .))> Action14))+ ('\\' '"'))> */
		nil,
		/* 10 NAMERUNE <- <(ALNUM / ((&(',') ',') | (&('/') '/') | (&('.') '.') | (&('_') '_') | (&('-') '-') | (&('~') '~')))> */
		func() bool {
			position89, tokenIndex89 := position, tokenIndex
			{
				position90 := position
				{
					position91, tokenIndex91 := position, tokenIndex
					{
						position93 := position
						{
							switch buffer[position] {
							case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l92
								}
								position++
							case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
								if c := buffer[position]; c < rune('A') || c > rune('Z') {
									goto l92
								}
								position++
							default:
								if c := buffer[position]; c < rune('a') || c > rune('z') {
									goto l92
								}
								position++
							}
						}

						add(ruleALNUM, position93)
					}
					goto l91
				l92:
					position, tokenIndex = position91, tokenIndex91
					{
						switch buffer[position] {
						case ',':
							if buffer[position] != rune(',') {
								goto l89
							}
							position++
						case '/':
							if buffer[position] != rune('/') {
								goto l89
							}
							position++
						case '.':
							if buffer[position] != rune('.') {
								goto l89
							}
							position++
						case '_':
							if buffer[position] != rune('_') {
								goto l89
							}
							position++
						case '-':
							if buffer[position] != rune('-') {
								goto l89
							}
							position++
						default:
							if buffer[position] != rune('~') {
								goto l89
							}
							position++
						}
					}

				}
			l91:
				add(ruleNAMERUNE, position90)
			}
			return true
		l89:
			position, tokenIndex = position89, tokenIndex89
			return false
		},
		/* 11 ALNUM <- <((&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))> */
		nil,
		/* 12 DIGIT <- <[0-9]> */
		nil,
		/* 13 END <- <!.> */
		nil,
		nil,
		/* 16 Action0 <- <{ p.Name = text }> */
		nil,
		/* 17 Action1 <- <{ p.EndMillis = text }> */
		nil,
		/* 18 Action2 <- <{ p.StartMillis = text }> */
		nil,
		/* 19 Action3 <- <{ p.Annotations = map[string]string{} }> */
		nil,
		/* 20 Action4 <- <{ p.Tags = map[string]string{} }> */
		nil,
		/* 21 Action5 <- <{ p.currentKey = text }> */
		nil,
		/* 22 Action6 <- <{ p.Annotations[p.currentKey] = p.currentValue }> */
		nil,
		/* 23 Action7 <- <{ p.currentValue = "" }> */
		nil,
		/* 24 Action8 <- <{ p.currentValue += "\"" }> */
		nil,
		/* 25 Action9 <- <{ p.currentValue += text }> */
		nil,
		/* 26 Action10 <- <{ p.currentKey = text }> */
		nil,
		/* 27 Action11 <- <{ p.Tags[p.currentKey] = p.currentValue }> */
		nil,
		/* 28 Action12 <- <{ p.currentValue = "" }> */
		nil,
		/* 29 Action13 <- <{ p.currentValue += "\"" }> */
		nil,
		/* 30 Action14 <- <{ p.currentValue += text }> */
		nil,
	}
	p.rules = _rules
	return nil
}
