resources:
  - name: observability-for-kubernetes
    type: git
    source:
      uri: https://github.com/wavefrontHQ/observability-for-kubernetes.git
  - name: osspi-tool
    type: git
    icon: gitlab
    source:
      uri: https://gitlab.eng.vmware.com/source-insight-tooling/norsk-to-osspi.git
      username: 13906 # From goppegard's gitlab profile
      password: ((osspi.goppegard-gitlab-pat))
      branch: main
  - name: wavefront-kubernetes-adapter
    type: git
    source:
      uri: https://github.com/wavefrontHQ/wavefront-kubernetes-adapter.git
  - name: prometheus-storage-adapter
    type: git
    source:
      uri: https://github.com/wavefrontHQ/prometheus-storage-adapter.git
  - name: wavefront-sdk-java
    source:
      uri: https://github.com/wavefrontHQ/wavefront-sdk-java.git
    type: git
  - name: wavefront-sdk-python
    source:
      uri: https://github.com/wavefrontHQ/wavefront-sdk-python.git
    type: git
  - name: wavefront-spring-boot
    source:
      branch: springboot3
      uri: https://github.com/wavefrontHQ/wavefront-spring-boot.git
    type: git
jobs:
  - name: update-self
    plan:
    - get: observability-for-kubernetes
      trigger: true
    - set_pipeline: observability-for-kubernetes-osspi
      file: observability-for-kubernetes/osspi/pipeline.yaml
  - name: osspi-scan-collector
    serial: true
    plan:
      - in_parallel:
          - get: observability-for-kubernetes
            trigger: true
            params: { submodules: all }
      - in_parallel:
        - task: osspi-scan-packages
          file: observability-for-kubernetes/osspi/tasks/osspi/run-osspi-source.yaml
          input_mapping:
            ci_repo: observability-for-kubernetes
            project_repo: observability-for-kubernetes
          params:
            SCAN_PATH: collector
            REPO: project_repo
            API_KEY: ((osspi.osm-prod-api-key))
            USERNAME: ((osspi.osm-prod-username))
            PRODUCT: WavefrontKubernetesCollector
            VERSION: Latest
            PREPARE: |
              GOMOD_VERSION=$(go list -m -f '{{.GoVersion}}') && \
                go env -w GOTOOLCHAIN=go$GOMOD_VERSION && \
                go mod vendor
            OSSPI_SCANNING_PARAMS: |
              enable: true
              include_bomtools: "go_mod"
              search_depth: 5
              go_mod.path: "/go/bin/go"
              # exclude for signature scans
              exclude_patterns:
                - vendor
            OSSPI_IGNORE_RULES: |
              - name_regex: onsi\/ginkgo
                version_regex: .*
              - name_regex: gomega
                version_regex: .*
  - name: osspi-scan-operator
    serial: true
    plan:
      - in_parallel:
        - get: observability-for-kubernetes
          trigger: true
          params: { submodules: all }
      - do:
        - task: osspi-scan-packages
          timeout: 30m
          attempts: 2
          file: observability-for-kubernetes/osspi/tasks/osspi/run-osspi-source.yaml
          input_mapping:
            ci_repo: observability-for-kubernetes
            project_repo: observability-for-kubernetes
          params:
            SCAN_PATH: operator
            REPO: project_repo
            API_KEY: ((osspi.osm-prod-api-key))
            OSM_PACKAGE_GROUP_NAME: operator
            USERNAME: ((osspi.osm-prod-username))
            PRODUCT: Wavefront_K8_Operator
            VERSION: Latest
            PREPARE: |
              GOMOD_VERSION=$(go list -m -f '{{.GoVersion}}') && \
                go env -w GOTOOLCHAIN=go$GOMOD_VERSION && \
                go mod vendor
            OSSPI_SCANNING_PARAMS: |
              enable: true
              include_bomtools: "go_mod"
              search_depth: 5
              go_mod.path: "/go/bin/go"
              # exclude for signature scans
              exclude_patterns:
                - vendor
                - pixie-sizer
            OSSPI_IGNORE_RULES: |
              - name_regex: onsi\/ginkgo
                version_regex: .*
              - name_regex: gomega
                version_regex: .*
        - task: osspi-scan-pixie-sizer
          timeout: 30m
          attempts: 2
          file: observability-for-kubernetes/osspi/tasks/osspi/run-osspi-source.yaml
          input_mapping:
            ci_repo: observability-for-kubernetes
            project_repo: observability-for-kubernetes
          params:
            SCAN_PATH: operator/pixie-sizer
            REPO: project_repo
            API_KEY: ((osspi.osm-prod-api-key))
            USERNAME: ((osspi.osm-prod-username))
            PRODUCT: Wavefront_K8_Operator
            VERSION: Latest
            PREPARE: |
              GOMOD_VERSION=$(go list -m -f '{{.GoVersion}}') && \
                go env -w GOTOOLCHAIN=go$GOMOD_VERSION && \
                go mod vendor
            OSM_PACKAGE_GROUP_NAME: pixie-sizer
            OSSPI_SCANNING_PARAMS: |
              enable: true
              include_bomtools: "go_mod"
              search_depth: 5
              go_mod.path: "/go/bin/go"
              # exclude for signature scans
              exclude_patterns:
                - vendor
            OSSPI_IGNORE_RULES: |
              - name_regex: onsi\/ginkgo
                version_regex: .*
              - name_regex: gomega
                version_regex: .*
        - task: osspi-scan-fluentbit
          timeout: 30m
          file: observability-for-kubernetes/osspi/tasks/osspi/run-osspi-docker.yaml
          input_mapping:
            ci_repo: observability-for-kubernetes
          params:
            IMAGE: projects.registry.vmware.com/tanzu_observability/kubernetes-operator-fluentbit
            TAG: 2.1.10
            API_KEY: ((osspi.osm-prod-api-key))
            USERNAME: ((osspi.osm-prod-username))
            PRODUCT: Wavefront_K8_Operator
            VERSION: Latest
            APPEND: true
  - name: osspi-scan-wavefront-kubernetes-adapter
    serial: true
    plan:
    - in_parallel:
      - get: observability-for-kubernetes
        params: { submodules: all }
      - get: wavefront-kubernetes-adapter
        trigger: true
        params: { submodules: all }
    - in_parallel:
      - task: osspi-scan-packages
        file: observability-for-kubernetes/osspi/tasks/osspi/run-osspi-source.yaml
        input_mapping:
          ci_repo: observability-for-kubernetes
          project_repo: wavefront-kubernetes-adapter
        params:
          REPO: project_repo
          API_KEY: ((osspi.osm-prod-api-key))
          USERNAME: ((osspi.osm-prod-username))
          PRODUCT: WavefrontKubernetesAdapter
          VERSION: Latest
          PREPARE: |
            GOMOD_VERSION=$(go list -m -f '{{.GoVersion}}') && \
              go env -w GOTOOLCHAIN=go$GOMOD_VERSION && \
              go mod vendor
          OSSPI_SCANNING_PARAMS: |
            enable: true
            include_bomtools: "go_mod"
            search_depth: 5
            go_mod.path: "/go/bin/go"
            # exclude for signature scans
            exclude_patterns:
              - vendor
          OSSPI_IGNORE_RULES: |
            - name_regex: onsi\/ginkgo
              version_regex: .*
            - name_regex: gomega
              version_regex: .*
  - name: osspi-scan-prometheus-storage-adapter
    serial: true
    plan:
    - in_parallel:
      - get: observability-for-kubernetes
        params: { submodules: all }
      - get: prometheus-storage-adapter
        trigger: true
        params: { submodules: all }
    - in_parallel:
      - task: osspi-scan-packages
        file: observability-for-kubernetes/osspi/tasks/osspi/run-osspi-source.yaml
        input_mapping:
          ci_repo: observability-for-kubernetes
          project_repo: prometheus-storage-adapter
        params:
          REPO: project_repo
          API_KEY: ((osspi.osm-prod-api-key))
          USERNAME: ((osspi.osm-prod-username))
          PRODUCT: PrometheusStorageAdapter
          VERSION: Latest
          PREPARE: |
            GOMOD_VERSION=$(go list -m -f '{{.GoVersion}}') && \
              go env -w GOTOOLCHAIN=go$GOMOD_VERSION && \
              go mod vendor
          OSSPI_SCANNING_PARAMS: |
            enable: true
            include_bomtools: "go_mod"
            search_depth: 5
            go_mod.path: "/go/bin/go"
            # exclude for signature scans
            exclude_patterns:
              - vendor
          OSSPI_IGNORE_RULES: |
            - name_regex: onsi\/ginkgo
              version_regex: .*
            - name_regex: gomega
              version_regex: .*

  - name: osspi-scan-wavefront-sdk-java
    serial: true
    plan:
    - in_parallel:
      - get: osspi-tool
      - get: wavefront-sdk-java
        trigger: true
        params: { submodules: all }
    - in_parallel:
      - task: osspi-scan-packages
        file: osspi-tool/tasks/osspi/run-osspi-source.yaml
        input_mapping:
          repo1: osspi-tool
          repo2: wavefront-sdk-java
        params:
          REPO: repo2
          API_KEY: ((osspi.osm-prod-api-key))
          USERNAME: ((osspi.osm-prod-username))
          OSM_ENVIRONMENT: production
          PRODUCT: wavefront-sdk-java
          VERSION: Latest
          PREPARE: |
            curl --output /tmp/maven.tar.gz https://dlcdn.apache.org/maven/maven-3/3.9.4/binaries/apache-maven-3.9.4-bin.tar.gz
            tar -xf /tmp/maven.tar.gz -C /tmp
          OSSPI_SCANNING_PARAMS: |
            enable: true
            include_bomtools: "maven"
            maven.path: /tmp/apache-maven-3.9.4/bin/mvn
            maven.exclude_scopes: "test"
            search_depth: 5
            # exclude for signature scans
            exclude_patterns:
            - test

  - name: osspi-scan-wavefront-sdk-python
    serial: true
    plan:
    - in_parallel:
      - get: osspi-tool
      - get: wavefront-sdk-python
        trigger: true
        params:
          submodules: all
    - in_parallel:
        steps:
        - task: osspi-scan-packages
          file: osspi-tool/tasks/osspi/run-osspi-source.yaml
          input_mapping:
            repo1: osspi-tool
            repo2: wavefront-sdk-python
          params:
            REPO: repo2
            API_KEY: ((osspi.osm-prod-api-key))
            USERNAME: ((osspi.osm-prod-username))
            OSM_ENVIRONMENT: production
            PRODUCT: wavefront-sdk-python
            VERSION: Latest
            PREPARE: |
              pip install pipreqs
              pipreqs .
            OSSPI_SCANNING_PARAMS: |
              enable: true
              include_bomtools: "pip"
              pip.path: /usr/bin/pip3
              pip.python_path: /usr/bin/python3
              pip.requirements_path: requirements.txt
              search_depth: 5
              # exclude for signature scans
              exclude_patterns:
              - test

  - name: osspi-scan-wavefront-spring-boot
    serial: true
    plan:
    - in_parallel:
      - get: osspi-tool
      - get: wavefront-spring-boot
        trigger: true
        params: { submodules: all }
    - in_parallel:
      - task: osspi-scan-packages
        file: osspi-tool/tasks/osspi/run-osspi-source.yaml
        input_mapping:
          repo1: osspi-tool
          repo2: wavefront-spring-boot
        params:
          REPO: repo2
          API_KEY: ((osspi.osm-prod-api-key))
          USERNAME: ((osspi.osm-prod-username))
          OSM_ENVIRONMENT: production
          PRODUCT: WavefrontSprintBootAutoconfigure
          VERSION: Latest
          PREPARE: |
            curl --output /tmp/maven.tar.gz https://dlcdn.apache.org/maven/maven-3/3.9.4/binaries/apache-maven-3.9.4-bin.tar.gz
            tar -xf /tmp/maven.tar.gz -C /tmp
          OSSPI_SCANNING_PARAMS: |
            enable: true
            include_bomtools: "maven"
            maven.path: /tmp/apache-maven-3.9.4/bin/mvn
            maven.exclude_scopes: "test"
            search_depth: 5
            # exclude for signature scans
            exclude_patterns:
            - test
