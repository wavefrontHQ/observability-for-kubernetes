apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    
  labels:
    
    app: pl-monitoring
    etcd_cluster: pl-etcd
  name: pl-etcd
  namespace: observability-system
spec:
  podManagementPolicy: Parallel
  replicas: 3
  selector:
    matchLabels:
      app: pl-monitoring
      etcd_cluster: pl-etcd
  serviceName: pl-etcd
  template:
    metadata:
      annotations:
        
      labels:
        
        app: pl-monitoring
        etcd_cluster: pl-etcd
        plane: control
      name: pl-etcd
    spec:
      containers:
      - command:
        - /bin/sh
        - -ec
        - |
          HOSTNAME=$(hostname)

          eps() {
            EPS=""
            for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
              EPS="${EPS}${EPS:+,}https://${CLUSTER_NAME}-${i}.${CLUSTER_NAME}.${POD_NAMESPACE}.svc:2379"
            done
            echo ${EPS}
          }

          member_hash() {
            etcdctl \
                --cert=/etc/etcdtls/client/etcd-tls/etcd-client.crt \
                --key=/etc/etcdtls/client/etcd-tls/etcd-client.key \
                --cacert=/etc/etcdtls/client/etcd-tls/etcd-client-ca.crt \
                --endpoints=$(eps) \
                member list | grep https://${HOSTNAME}.${CLUSTER_NAME}.${POD_NAMESPACE}.svc:2380 | cut -d',' -f1
          }

          num_existing() {
            etcdctl \
                --cert=/etc/etcdtls/client/etcd-tls/etcd-client.crt \
                --key=/etc/etcdtls/client/etcd-tls/etcd-client.key \
                --cacert=/etc/etcdtls/client/etcd-tls/etcd-client-ca.crt \
                --endpoints=$(eps) \
                member list | wc -l
          }

          initial_peers() {
            PEERS=""
            for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
              PEERS="${PEERS}${PEERS:+,}${CLUSTER_NAME}-${i}=https://${CLUSTER_NAME}-${i}.${CLUSTER_NAME}.${POD_NAMESPACE}.svc:2380"
            done
            echo ${PEERS}
          }

          MEMBER_HASH=$(member_hash)
          EXISTING=$(num_existing)

          # Re-joining after failure?
          if [ -n "${MEMBER_HASH}" ]; then
            echo "Re-joining member ${HOSTNAME}"

            etcdctl \
                --cert=/etc/etcdtls/client/etcd-tls/etcd-client.crt \
                --key=/etc/etcdtls/client/etcd-tls/etcd-client.key \
                --cacert=/etc/etcdtls/client/etcd-tls/etcd-client-ca.crt \
                --endpoints=$(eps) \
                member remove ${MEMBER_HASH}

            rm -rf /var/run/etcd/*
            mkdir -p /var/run/etcd/
          fi

          if [ ${EXISTING} -gt 0 ]; then
            while true; do
              echo "Waiting for ${HOSTNAME}.${CLUSTER_NAME}.${POD_NAMESPACE} to come up"
              ping -W 1 -c 1 ${HOSTNAME}.${CLUSTER_NAME}.${POD_NAMESPACE} > /dev/null && break
              sleep 1s
            done

            etcdctl \
                --cert=/etc/etcdtls/client/etcd-tls/etcd-client.crt \
                --key=/etc/etcdtls/client/etcd-tls/etcd-client.key \
                --cacert=/etc/etcdtls/client/etcd-tls/etcd-client-ca.crt \
                --endpoints=$(eps) \
                member add ${HOSTNAME} --peer-urls=https://${HOSTNAME}.${CLUSTER_NAME}.${POD_NAMESPACE}.svc:2380 | grep "^ETCD_" > /var/run/etcd/new_member_envs

            if [ $? -ne 0 ]; then
              echo "Member add ${HOSTNAME} error"
              rm -f /var/run/etcd/new_member_envs
              exit 1
            fi

            cat /var/run/etcd/new_member_envs
            . /var/run/etcd/new_member_envs

            exec etcd --name ${HOSTNAME} \
                --initial-advertise-peer-urls https://${HOSTNAME}.${CLUSTER_NAME}.${POD_NAMESPACE}.svc:2380 \
                --listen-peer-urls https://0.0.0.0:2380 \
                --listen-client-urls https://0.0.0.0:2379 \
                --advertise-client-urls https://${HOSTNAME}.${CLUSTER_NAME}.${POD_NAMESPACE}.svc:2379 \
                --data-dir /var/run/etcd/default.etcd \
                --initial-cluster ${ETCD_INITIAL_CLUSTER} \
                --initial-cluster-state ${ETCD_INITIAL_CLUSTER_STATE} \
                --peer-client-cert-auth=true \
                --peer-trusted-ca-file=/etc/etcdtls/member/peer-tls/peer-ca.crt \
                --peer-cert-file=/etc/etcdtls/member/peer-tls/peer.crt \
                --peer-key-file=/etc/etcdtls/member/peer-tls/peer.key \
                --client-cert-auth=true \
                --trusted-ca-file=/etc/etcdtls/member/server-tls/server-ca.crt \
                --cert-file=/etc/etcdtls/member/server-tls/server.crt \
                --key-file=/etc/etcdtls/member/server-tls/server.key \
                --max-request-bytes 2000000 \
                --max-wals 1 \
                --max-snapshots 1 \
                --quota-backend-bytes 8589934592 \
                --snapshot-count 5000
          fi

          for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
            while true; do
              echo "Waiting for ${CLUSTER_NAME}-${i}.${CLUSTER_NAME}.${POD_NAMESPACE} to come up"
              ping -W 1 -c 1 ${CLUSTER_NAME}-${i}.${CLUSTER_NAME}.${POD_NAMESPACE} > /dev/null && break
              sleep 1s
            done
          done

          echo "Joining member ${HOSTNAME}"
          exec etcd --name ${HOSTNAME} \
              --initial-advertise-peer-urls https://${HOSTNAME}.${CLUSTER_NAME}.${POD_NAMESPACE}.svc:2380 \
              --listen-peer-urls https://0.0.0.0:2380 \
              --listen-client-urls https://0.0.0.0:2379 \
              --advertise-client-urls https://${HOSTNAME}.${CLUSTER_NAME}.${POD_NAMESPACE}.svc:2379 \
              --initial-cluster-token pl-etcd-cluster-1 \
              --data-dir /var/run/etcd/default.etcd \
              --initial-cluster $(initial_peers) \
              --initial-cluster-state new \
              --peer-client-cert-auth=true \
              --peer-trusted-ca-file=/etc/etcdtls/member/peer-tls/peer-ca.crt \
              --peer-cert-file=/etc/etcdtls/member/peer-tls/peer.crt \
              --peer-key-file=/etc/etcdtls/member/peer-tls/peer.key \
              --client-cert-auth=true \
              --trusted-ca-file=/etc/etcdtls/member/server-tls/server-ca.crt \
              --cert-file=/etc/etcdtls/member/server-tls/server.crt \
              --key-file=/etc/etcdtls/member/server-tls/server.key \
              --max-request-bytes 2000000 \
              --max-wals 1 \
              --max-snapshots 1 \
              --quota-backend-bytes 8589934592 \
              --snapshot-count 5000
        env:
        - name: INITIAL_CLUSTER_SIZE
          value: "3"
        - name: CLUSTER_NAME
          value: pl-etcd
        - name: ETCDCTL_API
          value: "3"
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: ETCD_AUTO_COMPACTION_RETENTION
          value: "5"
        - name: ETCD_AUTO_COMPACTION_MODE
          value: revision
        image: 'quay.io/coreos/etcd:v3.4.3'
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -ec
              - |
                HOSTNAME=$(hostname)

                member_hash() {
                  etcdctl \
                      --cert=/etc/etcdtls/client/etcd-tls/etcd-client.crt \
                      --key=/etc/etcdtls/client/etcd-tls/etcd-client.key \
                      --cacert=/etc/etcdtls/client/etcd-tls/etcd-client-ca.crt \
                      --endpoints=$(eps) \
                      member list | grep https://${HOSTNAME}.${CLUSTER_NAME}.${POD_NAMESPACE}.svc:2380 | cut -d',' -f1
                }

                eps() {
                  EPS=""
                  for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
                    EPS="${EPS}${EPS:+,}https://${CLUSTER_NAME}-${i}.${CLUSTER_NAME}.${POD_NAMESPACE}.svc:2379"
                  done
                  echo ${EPS}
                }

                MEMBER_HASH=$(member_hash)

                # Removing member from cluster
                if [ -n "${MEMBER_HASH}" ]; then
                  echo "Removing ${HOSTNAME} from etcd cluster"
                  etcdctl \
                      --cert=/etc/etcdtls/client/etcd-tls/etcd-client.crt \
                      --key=/etc/etcdtls/client/etcd-tls/etcd-client.key \
                      --cacert=/etc/etcdtls/client/etcd-tls/etcd-client-ca.crt \
                      --endpoints=$(eps) \
                      member remove $(member_hash)
                  if [ $? -eq 0 ]; then
                    # Remove everything otherwise the cluster will no longer scale-up
                    rm -rf /var/run/etcd/*
                  fi
                fi
        name: etcd
        ports:
        - containerPort: 2379
          name: client
        - containerPort: 2380
          name: server
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -ec
            - etcdctl --endpoints=https://localhost:2379 --cert=/etc/etcdtls/client/etcd-tls/etcd-client.crt
              --key=/etc/etcdtls/client/etcd-tls/etcd-client.key --cacert=/etc/etcdtls/client/etcd-tls/etcd-client-ca.crt
              endpoint status
          failureThreshold: 3
          initialDelaySeconds: 1
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 5
        volumeMounts:
        - mountPath: /var/run/etcd
          name: etcd-data
        - mountPath: /etc/etcdtls/member/peer-tls
          name: member-peer-tls
        - mountPath: /etc/etcdtls/member/server-tls
          name: member-server-tls
        - mountPath: /etc/etcdtls/client/etcd-tls
          name: etcd-client-tls
      volumes:
      - name: member-peer-tls
        secret:
          secretName: etcd-peer-tls-certs
      - name: member-server-tls
        secret:
          secretName: etcd-server-tls-certs
      - name: etcd-client-tls
        secret:
          secretName: etcd-client-tls-certs
      - emptyDir: {}
        name: etcd-data
