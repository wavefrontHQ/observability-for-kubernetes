---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gauge.kubernetes.network-stats
  namespace: observability-system
  labels:
    purpose: cron-script
data:
  script.pxl: |
    import px

    ns_per_ms = 1000 * 1000
    ns_per_s = 1000 * ns_per_ms

    # Window size to use on time_ column for bucketing.
    window_ns = px.DurationNanos(10 * ns_per_s)

    def exclude_known_namespaces(df):
      '''Exclude namespaces which are known to be noise.

      Args:
        @df: The DataFrames to filter.
      '''

      # Exclude DataFrames from kube-system
      #
      # It is not useful to see metrics related to the functioning of Kubernetes' system-components (such as the CNI,
      # core-dns, aws-node, etc)
      df = df[df.ctx['namespace'] != 'kube-system']

      # Exclude DataFrames from pixie client-side resources
      #
      # We do not need to know service-to-service communication happening between and amongst the pixie components
      # themselves, so we exclude them.
      df = df[df.ctx['namespace'] != 'pl']
      df = df[df.ctx['namespace'] != 'px-operator']
      df = df[df.ctx['namespace'] != 'olm']

      # Exclude DataFrames from aria-k8s
      #
      # This namespace is where the k8s-collector and telegraf-collector live. Excluding this namespace ensures that
      # data sent to Lemans from telegraf will not be re-reported by Pixie (since sending to Lemans happens over HTTP(s)
      df = df[df.ctx['namespace'] != 'aria-k8s']

      # Exclude DataFrames from observability-system
      #
      # This namespace is where the k8s-collector and telegraf-collector (as deployed by the Wavefront operator) live.
      # Excluding this namespace ensures that data sent to Lemans from telegraf will not be re-reported by Pixie (since
      # sending to Lemans happens over HTTP(s)
      df = df[df.ctx['namespace'] != 'observability-system']

      return df

    df = px.DataFrame(table='network_stats', start_time=px.plugin.start_time, end_time=px.plugin.end_time)

    # Filter out entities
    df = exclude_known_namespaces(df)

    df.pod = df.ctx['pod_name']

    # Add context
    df.node = df.ctx['node']
    df.namespace = px.pod_name_to_namespace(df.pod)

    # The Pod Name, as assigned by Pixie, includes the Pod's namespace in the name. ex. namespace/pod-name.
    # This replace ensures that we only have the pod name
    df.pod_name = px.replace('.*\/', df.ctx['pod'], '')

    df.service = df.ctx['service']
    df.deployment = df.ctx['deployment']
    df.cluster_name = px.vizier_name()
    df.aria_provider = 'Kubernetes'
    df.aria_service = 'Workload'
    df.timestamp = px.bin(df.time_, window_ns)

    px.export(
      df, px.otel.Data(
        resource={
          # User must specify service_name
          'service.name': "vmware",
          'aria.provider': df.aria_provider,
          'aria.service': df.aria_service,
          'kubernetes.cluster.name': df.cluster_name,
          'kubernetes.deployment.name': df.deployment,
          'kubernetes.namespace.name': df.namespace,
          'kubernetes.pod.fullname': df.pod,
          'kubernetes.pod.name': df.pod_name,
          'kubernetes.service.name': df.service,
          'service.instance.id': df.pod,
        },
        data=[
          px.otel.metric.Gauge(
            name='kubernetes.network_stats.rx_bytes',
            description='Received network traffic in bytes of the pod',
            value=df.rx_bytes,
            attributes={},
          ),
          px.otel.metric.Gauge(
            name='kubernetes.network_stats.rx_packets',
            description='Number of received network packets of the pod',
            value=df.rx_packets,
            attributes={},
          ),
          px.otel.metric.Gauge(
            name='kubernetes.network_stats.rx_errors',
            description='Number of network receive errors of the pod',
            value=df.rx_errors,
            attributes={},
          ),
          px.otel.metric.Gauge(
            name='kubernetes.network_stats.rx_drops',
            description='Number of dropped network packets being received of the pod',
            value=df.rx_drops,
            attributes={},
          ),
          px.otel.metric.Gauge(
            name='kubernetes.network_stats.tx_bytes',
            description='Transmitted network traffic of the pod',
            value=df.tx_bytes,
            attributes={},
          ),
          px.otel.metric.Gauge(
            name='kubernetes.network_stats.tx_packets',
            description='Number of transmitted network packets of the pod',
            value=df.tx_packets,
            attributes={},
          ),
          px.otel.metric.Gauge(
            name='kubernetes.network_stats.tx_errors',
            description='Number of network transmit errors of the pod',
            value=df.tx_errors,
            attributes={},
          ),
          px.otel.metric.Gauge(
            name='kubernetes.network_stats.tx_drops',
            description='Number of dropped network packets being transmitted of the pod',
            value=df.tx_drops,
            attributes={},
          ),
        ],
      ),
    )
  configs.yaml: |
    otelEndpointConfig:
      insecure: true
      url: aria-telegraf-collector.aria-k8s.svc.cluster.local:4317
  cron.yaml: |
    frequency_s: 60