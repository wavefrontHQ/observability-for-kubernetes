apiVersion: v1
kind: ConfigMap
metadata:
  name: default-wavefront-collector-config
  namespace: {{ .Namespace }}
  annotations:
    wavefront.com/conditionally-provision: '{{and (not .CustomConfig) .MetricsEnable }}'
data:
  config.yaml: |
    clusterName: {{ .ClusterName }}
    enableDiscovery: {{ .EnableDiscovery }}
    enableEvents: false
    defaultCollectionInterval: {{ .DefaultCollectionInterval }}
    flushInterval: 10s
    sinkExportDataTimeout: 20s

    sinks:
    - proxyAddress: {{ .ProxyAddress }}
      {{- if .Tags }}
      tags:
{{ .Tags | toYaml | indent 8 }}
      {{- end }}

      {{- if .Filters }}
      filters:
        {{- if .Filters.DenyList }}
        metricDenyList:
{{ .Filters.DenyList | toYaml | indent 8 }}
        {{- end }}
        {{- if .Filters.AllowList }}
        metricAllowList:
{{ .Filters.AllowList | toYaml | indent 8 }}
        {{- end }}
        {{- if .Filters.TagDenyList }}
        metricTagDenyList:
{{ .Filters.TagDenyList | toYaml | indent 10 }}
        {{- end }}
        {{- if .Filters.TagAllowList }}
        metricTagAllowList:
{{ .Filters.TagAllowList | toYaml | indent 10 }}
        {{- end }}
        {{- if .Filters.TagExclude }}
        tagExclude:
{{ .Filters.TagExclude | toYaml | indent 8 }}
        {{- end }}
        {{- if .Filters.TagInclude }}
        tagInclude:
{{ .Filters.TagInclude | toYaml | indent 8 }}
        {{- end }}
        {{- if .Filters.TagGuaranteeList }}
        tagGuaranteeList:
{{ .Filters.TagGuaranteeList | toYaml | indent 8 }}
        {{- end }}
      {{- end }}

    {{- if .KubernetesEvents.Enable }}
    - type: "external"
      enableEvents: true
      externalEndpointURL: "{{ .KubernetesEvents.IngestionUrl }}"
    events:
      filters:
        tagAllowListSets:
        - type:
          - "Warning"
        - type:
          - "Normal"
          kind:
          - "Pod"
          reason:
          - "Backoff"
    {{- end }}

    sources:
      kubernetes_source:
        url: https://kubernetes.default.svc
        kubeletPort: 10250
        kubeletHttps: true
        useServiceAccount: true
        insecure: true
        prefix: kubernetes.
        filters:
          metricDenyList:
          - 'kubernetes.sys_container.*'
          - 'kubernetes.node.ephemeral_storage.*'

      internal_stats_source:
        prefix: kubernetes.

      kubernetes_state_source:
        prefix: kubernetes.

      kubernetes_cadvisor_source:
        prefix: 'kubernetes.cadvisor.'
        filters:
          metricAllowList:
          - "kubernetes.cadvisor.container.cpu.cfs.periods.total.counter"
          - "kubernetes.cadvisor.container.cpu.cfs.throttled.seconds.total.counter"
          - "kubernetes.cadvisor.container.cpu.cfs.throttled.periods.total.counter"
          metricTagAllowList:
            container:
            - '*'

      {{- if .ControlPlane.Enable }}
      prometheus_sources:
       - url: 'https://kubernetes.default.svc:443/metrics'
         name: 'etcd-workqueue'
         httpConfig:
           bearer_token_file: '/var/run/secrets/kubernetes.io/serviceaccount/token'
           tls_config:
             ca_file: '/var/run/secrets/kubernetes.io/serviceaccount/ca.crt'
             insecure_skip_verify: true
         prefix: kubernetes.controlplane.
         convertHistograms: true
         filters:
           metricAllowList:
           - 'kubernetes.controlplane.etcd.request.duration.seconds'
           - 'kubernetes.controlplane.etcd.db.total.size.in.bytes.gauge'
           - 'kubernetes.controlplane.apiserver.storage.db.total.size.in.bytes.gauge'
           - 'kubernetes.controlplane.workqueue.adds.total.counter'
           - 'kubernetes.controlplane.workqueue.queue.duration.seconds'

       - url: 'https://kubernetes.default.svc:443/metrics'
         name: 'apiserver'
         httpConfig:
           bearer_token_file: '/var/run/secrets/kubernetes.io/serviceaccount/token'
           tls_config:
             ca_file: '/var/run/secrets/kubernetes.io/serviceaccount/ca.crt'
             insecure_skip_verify: true
         prefix: kubernetes.controlplane.
         convertHistograms: true
         filters:
           metricAllowList:
           - 'kubernetes.controlplane.apiserver.request.duration.seconds'
           - 'kubernetes.controlplane.apiserver.request.total.counter'
           - 'kubernetes.controlplane.apiserver.storage.objects.gauge'
           metricTagAllowList:
             resource:
             - 'customresourcedefinitions'
             - 'namespaces'
             - 'lease'
             - 'nodes'
             - 'pods'
             - 'tokenreviews'
             - 'subjectaccessreviews'
      {{- end }}

    discovery:
      {{- if .Openshift }}
      # Exclude resources from annotation-based discovery
      annotation_excludes:
      - resourceType: "service"
        # namespaces to filter resources by. Provided as a list of glob pattern strings.
        namespaces:
        - "openshift-*"
      {{- end }}
      enable_runtime_plugins: true

      plugins:
      # auto-discover kube DNS
      - name: kube-dns-discovery
        type: prometheus
        selectors:
          images:
          - '*k8s-dns-sidecar*'
          - '*kube-dns/sidecar*'
          labels:
            k8s-app:
            - kube-dns
        port: 10054
        path: /metrics
        scheme: http
        prefix: kube.dns.
        filters:
          metricAllowList:
          - 'kube.dns.kubedns.dnsmasq.errors.counter'
          - 'kube.dns.kubedns.dnsmasq.evictions.counter'
          - 'kube.dns.kubedns.dnsmasq.hits.counter'
          - 'kube.dns.kubedns.dnsmasq.insertions.counter'
          - 'kube.dns.kubedns.dnsmasq.max.size.counter'
          - 'kube.dns.kubedns.dnsmasq.misses.counter'
          - 'kube.dns.process.*'
          # These metrics don't come through at all.
          # TODO revisit later if customers need a kube-dns dashboard.
          # - 'kube.dns.http.request.duration.microseconds'
          # - 'kube.dns.http.request.size.bytes'
          # - 'kube.dns.http.requests.total.counter'
          # - 'kube.dns.http.response.size.bytes'

      # auto-discover coredns
      - name: coredns-discovery
        type: prometheus
        selectors:
          images:
          - '*coredns:*'
          labels:
            k8s-app:
            - kube-dns
        port: 9153
        path: /metrics
        scheme: http
        prefix: kube.coredns.
        filters:
          metricAllowList:
          - 'kube.coredns.coredns.cache.*'
          - 'kube.coredns.coredns.dns.request.count.total.counter'
          - 'kube.coredns.coredns.dns.request.duration.seconds'
          - 'kube.coredns.coredns.dns.request.size.bytes'
          - 'kube.coredns.coredns.dns.request.type.count.total.counter'
          - 'kube.coredns.coredns.dns.response.rcode.count.total.counter'
          - 'kube.coredns.coredns.dns.response.size.bytes'
          - 'kube.coredns.process.*'