// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/shared/bloomfilterpb/bloomfilter.proto

package bloomfilterpb

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type XXHash64BloomFilter struct {
	Data      []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	NumHashes int32  `protobuf:"varint,2,opt,name=num_hashes,json=numHashes,proto3" json:"num_hashes,omitempty"`
}

func (m *XXHash64BloomFilter) Reset()      { *m = XXHash64BloomFilter{} }
func (*XXHash64BloomFilter) ProtoMessage() {}
func (*XXHash64BloomFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac9b74e6832ef85a, []int{0}
}
func (m *XXHash64BloomFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XXHash64BloomFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XXHash64BloomFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XXHash64BloomFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XXHash64BloomFilter.Merge(m, src)
}
func (m *XXHash64BloomFilter) XXX_Size() int {
	return m.Size()
}
func (m *XXHash64BloomFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_XXHash64BloomFilter.DiscardUnknown(m)
}

var xxx_messageInfo_XXHash64BloomFilter proto.InternalMessageInfo

func (m *XXHash64BloomFilter) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *XXHash64BloomFilter) GetNumHashes() int32 {
	if m != nil {
		return m.NumHashes
	}
	return 0
}

func init() {
	proto.RegisterType((*XXHash64BloomFilter)(nil), "px.shared.bloomfilterpb.XXHash64BloomFilter")
}

func init() {
	proto.RegisterFile("src/shared/bloomfilterpb/bloomfilter.proto", fileDescriptor_ac9b74e6832ef85a)
}

var fileDescriptor_ac9b74e6832ef85a = []byte{
	// 197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x2a, 0x2e, 0x4a, 0xd6,
	0x2f, 0xce, 0x48, 0x2c, 0x4a, 0x4d, 0xd1, 0x4f, 0xca, 0xc9, 0xcf, 0xcf, 0x4d, 0xcb, 0xcc, 0x29,
	0x49, 0x2d, 0x2a, 0x48, 0x42, 0xe6, 0xe9, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x89, 0x17, 0x54,
	0xe8, 0x41, 0x94, 0xea, 0xa1, 0x28, 0x55, 0xf2, 0xe0, 0x12, 0x8e, 0x88, 0xf0, 0x48, 0x2c, 0xce,
	0x30, 0x33, 0x71, 0x02, 0x49, 0xb8, 0x81, 0x25, 0x84, 0x84, 0xb8, 0x58, 0x52, 0x12, 0x4b, 0x12,
	0x25, 0x18, 0x15, 0x18, 0x35, 0x78, 0x82, 0xc0, 0x6c, 0x21, 0x59, 0x2e, 0xae, 0xbc, 0xd2, 0xdc,
	0xf8, 0x8c, 0xc4, 0xe2, 0x8c, 0xd4, 0x62, 0x09, 0x26, 0x05, 0x46, 0x0d, 0xd6, 0x20, 0xce, 0xbc,
	0xd2, 0x5c, 0x0f, 0xb0, 0x80, 0x93, 0xf3, 0x85, 0x87, 0x72, 0x0c, 0x37, 0x1e, 0xca, 0x31, 0x7c,
	0x78, 0x28, 0xc7, 0xd8, 0xf0, 0x48, 0x8e, 0x71, 0xc5, 0x23, 0x39, 0xc6, 0x13, 0x8f, 0xe4, 0x18,
	0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0xf1, 0xc5, 0x23, 0x39, 0x86, 0x0f, 0x8f, 0xe4,
	0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0x5e,
	0x14, 0xe7, 0x24, 0xb1, 0x81, 0x9d, 0x6b, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x2a, 0x3f, 0x9c,
	0xfd, 0xdc, 0x00, 0x00, 0x00,
}

func (this *XXHash64BloomFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*XXHash64BloomFilter)
	if !ok {
		that2, ok := that.(XXHash64BloomFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if this.NumHashes != that1.NumHashes {
		return false
	}
	return true
}
func (this *XXHash64BloomFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&bloomfilterpb.XXHash64BloomFilter{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "NumHashes: "+fmt.Sprintf("%#v", this.NumHashes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBloomfilter(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *XXHash64BloomFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XXHash64BloomFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XXHash64BloomFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumHashes != 0 {
		i = encodeVarintBloomfilter(dAtA, i, uint64(m.NumHashes))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintBloomfilter(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBloomfilter(dAtA []byte, offset int, v uint64) int {
	offset -= sovBloomfilter(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *XXHash64BloomFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovBloomfilter(uint64(l))
	}
	if m.NumHashes != 0 {
		n += 1 + sovBloomfilter(uint64(m.NumHashes))
	}
	return n
}

func sovBloomfilter(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBloomfilter(x uint64) (n int) {
	return sovBloomfilter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *XXHash64BloomFilter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&XXHash64BloomFilter{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`NumHashes:` + fmt.Sprintf("%v", this.NumHashes) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBloomfilter(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *XXHash64BloomFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBloomfilter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XXHash64BloomFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XXHash64BloomFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBloomfilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBloomfilter
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBloomfilter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumHashes", wireType)
			}
			m.NumHashes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBloomfilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumHashes |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBloomfilter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBloomfilter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBloomfilter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBloomfilter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBloomfilter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBloomfilter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBloomfilter
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBloomfilter
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBloomfilter
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBloomfilter        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBloomfilter          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBloomfilter = fmt.Errorf("proto: unexpected end of group")
)
