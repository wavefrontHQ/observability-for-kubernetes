// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/vizier/services/metadata/storepb/store.proto

package storepb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	uuidpb "px.dev/pixie/src/api/proto/uuidpb"
	logicalpb "px.dev/pixie/src/carnot/planner/dynamic_tracing/ir/logicalpb"
	statuspb "px.dev/pixie/src/common/base/statuspb"
	metadatapb "px.dev/pixie/src/shared/k8s/metadatapb"
	typespb "px.dev/pixie/src/shared/types/typespb"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TracepointInfo struct {
	ID            *uuidpb.UUID                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tracepoint    *logicalpb.TracepointDeployment `protobuf:"bytes,2,opt,name=tracepoint,proto3" json:"tracepoint,omitempty"`
	Name          string                          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ExpectedState statuspb.LifeCycleState         `protobuf:"varint,4,opt,name=expected_state,json=expectedState,proto3,enum=px.statuspb.LifeCycleState" json:"expected_state,omitempty"`
}

func (m *TracepointInfo) Reset()      { *m = TracepointInfo{} }
func (*TracepointInfo) ProtoMessage() {}
func (*TracepointInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ea71ea705227d1, []int{0}
}
func (m *TracepointInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TracepointInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TracepointInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TracepointInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracepointInfo.Merge(m, src)
}
func (m *TracepointInfo) XXX_Size() int {
	return m.Size()
}
func (m *TracepointInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TracepointInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TracepointInfo proto.InternalMessageInfo

func (m *TracepointInfo) GetID() *uuidpb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *TracepointInfo) GetTracepoint() *logicalpb.TracepointDeployment {
	if m != nil {
		return m.Tracepoint
	}
	return nil
}

func (m *TracepointInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TracepointInfo) GetExpectedState() statuspb.LifeCycleState {
	if m != nil {
		return m.ExpectedState
	}
	return statuspb.UNKNOWN_STATE
}

type AgentTracepointStatus struct {
	State   statuspb.LifeCycleState `protobuf:"varint,1,opt,name=state,proto3,enum=px.statuspb.LifeCycleState" json:"state,omitempty"`
	Status  *statuspb.Status        `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	ID      *uuidpb.UUID            `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	AgentID *uuidpb.UUID            `protobuf:"bytes,4,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
}

func (m *AgentTracepointStatus) Reset()      { *m = AgentTracepointStatus{} }
func (*AgentTracepointStatus) ProtoMessage() {}
func (*AgentTracepointStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ea71ea705227d1, []int{1}
}
func (m *AgentTracepointStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentTracepointStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentTracepointStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentTracepointStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentTracepointStatus.Merge(m, src)
}
func (m *AgentTracepointStatus) XXX_Size() int {
	return m.Size()
}
func (m *AgentTracepointStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentTracepointStatus.DiscardUnknown(m)
}

var xxx_messageInfo_AgentTracepointStatus proto.InternalMessageInfo

func (m *AgentTracepointStatus) GetState() statuspb.LifeCycleState {
	if m != nil {
		return m.State
	}
	return statuspb.UNKNOWN_STATE
}

func (m *AgentTracepointStatus) GetStatus() *statuspb.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *AgentTracepointStatus) GetID() *uuidpb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *AgentTracepointStatus) GetAgentID() *uuidpb.UUID {
	if m != nil {
		return m.AgentID
	}
	return nil
}

type TableInfo struct {
	Name             string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Desc             string                  `protobuf:"bytes,7,opt,name=desc,proto3" json:"desc,omitempty"`
	StartTimestampNS int64                   `protobuf:"varint,2,opt,name=start_timestamp_ns,json=startTimestampNs,proto3" json:"start_timestamp_ns,omitempty"`
	StopTimestampNS  int64                   `protobuf:"varint,3,opt,name=stop_timestamp_ns,json=stopTimestampNs,proto3" json:"stop_timestamp_ns,omitempty"`
	Columns          []*TableInfo_ColumnInfo `protobuf:"bytes,4,rep,name=columns,proto3" json:"columns,omitempty"`
	Tabletized       bool                    `protobuf:"varint,5,opt,name=tabletized,proto3" json:"tabletized,omitempty"`
	TabletizationKey string                  `protobuf:"bytes,6,opt,name=tabletization_key,json=tabletizationKey,proto3" json:"tabletization_key,omitempty"`
}

func (m *TableInfo) Reset()      { *m = TableInfo{} }
func (*TableInfo) ProtoMessage() {}
func (*TableInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ea71ea705227d1, []int{2}
}
func (m *TableInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableInfo.Merge(m, src)
}
func (m *TableInfo) XXX_Size() int {
	return m.Size()
}
func (m *TableInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TableInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TableInfo proto.InternalMessageInfo

func (m *TableInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TableInfo) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *TableInfo) GetStartTimestampNS() int64 {
	if m != nil {
		return m.StartTimestampNS
	}
	return 0
}

func (m *TableInfo) GetStopTimestampNS() int64 {
	if m != nil {
		return m.StopTimestampNS
	}
	return 0
}

func (m *TableInfo) GetColumns() []*TableInfo_ColumnInfo {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *TableInfo) GetTabletized() bool {
	if m != nil {
		return m.Tabletized
	}
	return false
}

func (m *TableInfo) GetTabletizationKey() string {
	if m != nil {
		return m.TabletizationKey
	}
	return ""
}

type TableInfo_ColumnInfo struct {
	Name         string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DataType     typespb.DataType     `protobuf:"varint,2,opt,name=data_type,json=dataType,proto3,enum=px.types.DataType" json:"data_type,omitempty"`
	PatternType  typespb.PatternType  `protobuf:"varint,3,opt,name=pattern_type,json=patternType,proto3,enum=px.types.PatternType" json:"pattern_type,omitempty"`
	Desc         string               `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	SemanticType typespb.SemanticType `protobuf:"varint,5,opt,name=semantic_type,json=semanticType,proto3,enum=px.types.SemanticType" json:"semantic_type,omitempty"`
}

func (m *TableInfo_ColumnInfo) Reset()      { *m = TableInfo_ColumnInfo{} }
func (*TableInfo_ColumnInfo) ProtoMessage() {}
func (*TableInfo_ColumnInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ea71ea705227d1, []int{2, 0}
}
func (m *TableInfo_ColumnInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableInfo_ColumnInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableInfo_ColumnInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableInfo_ColumnInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableInfo_ColumnInfo.Merge(m, src)
}
func (m *TableInfo_ColumnInfo) XXX_Size() int {
	return m.Size()
}
func (m *TableInfo_ColumnInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TableInfo_ColumnInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TableInfo_ColumnInfo proto.InternalMessageInfo

func (m *TableInfo_ColumnInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TableInfo_ColumnInfo) GetDataType() typespb.DataType {
	if m != nil {
		return m.DataType
	}
	return typespb.DATA_TYPE_UNKNOWN
}

func (m *TableInfo_ColumnInfo) GetPatternType() typespb.PatternType {
	if m != nil {
		return m.PatternType
	}
	return typespb.UNSPECIFIED
}

func (m *TableInfo_ColumnInfo) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *TableInfo_ColumnInfo) GetSemanticType() typespb.SemanticType {
	if m != nil {
		return m.SemanticType
	}
	return typespb.ST_UNSPECIFIED
}

type ComputedSchema struct {
	Tables              []*TableInfo                        `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty"`
	TableNameToAgentIDs map[string]*ComputedSchema_AgentIDs `protobuf:"bytes,2,rep,name=table_name_to_agent_ids,json=tableNameToAgentIds,proto3" json:"table_name_to_agent_ids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ComputedSchema) Reset()      { *m = ComputedSchema{} }
func (*ComputedSchema) ProtoMessage() {}
func (*ComputedSchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ea71ea705227d1, []int{3}
}
func (m *ComputedSchema) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComputedSchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComputedSchema.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComputedSchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputedSchema.Merge(m, src)
}
func (m *ComputedSchema) XXX_Size() int {
	return m.Size()
}
func (m *ComputedSchema) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputedSchema.DiscardUnknown(m)
}

var xxx_messageInfo_ComputedSchema proto.InternalMessageInfo

func (m *ComputedSchema) GetTables() []*TableInfo {
	if m != nil {
		return m.Tables
	}
	return nil
}

func (m *ComputedSchema) GetTableNameToAgentIDs() map[string]*ComputedSchema_AgentIDs {
	if m != nil {
		return m.TableNameToAgentIDs
	}
	return nil
}

type ComputedSchema_AgentIDs struct {
	AgentID []*uuidpb.UUID `protobuf:"bytes,1,rep,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
}

func (m *ComputedSchema_AgentIDs) Reset()      { *m = ComputedSchema_AgentIDs{} }
func (*ComputedSchema_AgentIDs) ProtoMessage() {}
func (*ComputedSchema_AgentIDs) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ea71ea705227d1, []int{3, 0}
}
func (m *ComputedSchema_AgentIDs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComputedSchema_AgentIDs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComputedSchema_AgentIDs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComputedSchema_AgentIDs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputedSchema_AgentIDs.Merge(m, src)
}
func (m *ComputedSchema_AgentIDs) XXX_Size() int {
	return m.Size()
}
func (m *ComputedSchema_AgentIDs) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputedSchema_AgentIDs.DiscardUnknown(m)
}

var xxx_messageInfo_ComputedSchema_AgentIDs proto.InternalMessageInfo

func (m *ComputedSchema_AgentIDs) GetAgentID() []*uuidpb.UUID {
	if m != nil {
		return m.AgentID
	}
	return nil
}

type K8SResource struct {
	// Types that are valid to be assigned to Resource:
	//	*K8SResource_Pod
	//	*K8SResource_Container
	//	*K8SResource_Service
	//	*K8SResource_Endpoints
	//	*K8SResource_Namespace
	//	*K8SResource_Node
	//	*K8SResource_ReplicaSet
	//	*K8SResource_Deployment
	Resource isK8SResource_Resource `protobuf_oneof:"resource"`
}

func (m *K8SResource) Reset()      { *m = K8SResource{} }
func (*K8SResource) ProtoMessage() {}
func (*K8SResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ea71ea705227d1, []int{4}
}
func (m *K8SResource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *K8SResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_K8SResource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *K8SResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_K8SResource.Merge(m, src)
}
func (m *K8SResource) XXX_Size() int {
	return m.Size()
}
func (m *K8SResource) XXX_DiscardUnknown() {
	xxx_messageInfo_K8SResource.DiscardUnknown(m)
}

var xxx_messageInfo_K8SResource proto.InternalMessageInfo

type isK8SResource_Resource interface {
	isK8SResource_Resource()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type K8SResource_Pod struct {
	Pod *metadatapb.Pod `protobuf:"bytes,1,opt,name=pod,proto3,oneof" json:"pod,omitempty"`
}
type K8SResource_Container struct {
	Container *metadatapb.ContainerUpdate `protobuf:"bytes,2,opt,name=container,proto3,oneof" json:"container,omitempty"`
}
type K8SResource_Service struct {
	Service *metadatapb.Service `protobuf:"bytes,3,opt,name=service,proto3,oneof" json:"service,omitempty"`
}
type K8SResource_Endpoints struct {
	Endpoints *metadatapb.Endpoints `protobuf:"bytes,4,opt,name=endpoints,proto3,oneof" json:"endpoints,omitempty"`
}
type K8SResource_Namespace struct {
	Namespace *metadatapb.Namespace `protobuf:"bytes,5,opt,name=namespace,proto3,oneof" json:"namespace,omitempty"`
}
type K8SResource_Node struct {
	Node *metadatapb.Node `protobuf:"bytes,6,opt,name=node,proto3,oneof" json:"node,omitempty"`
}
type K8SResource_ReplicaSet struct {
	ReplicaSet *metadatapb.ReplicaSet `protobuf:"bytes,7,opt,name=replica_set,json=replicaSet,proto3,oneof" json:"replica_set,omitempty"`
}
type K8SResource_Deployment struct {
	Deployment *metadatapb.Deployment `protobuf:"bytes,8,opt,name=deployment,proto3,oneof" json:"deployment,omitempty"`
}

func (*K8SResource_Pod) isK8SResource_Resource()        {}
func (*K8SResource_Container) isK8SResource_Resource()  {}
func (*K8SResource_Service) isK8SResource_Resource()    {}
func (*K8SResource_Endpoints) isK8SResource_Resource()  {}
func (*K8SResource_Namespace) isK8SResource_Resource()  {}
func (*K8SResource_Node) isK8SResource_Resource()       {}
func (*K8SResource_ReplicaSet) isK8SResource_Resource() {}
func (*K8SResource_Deployment) isK8SResource_Resource() {}

func (m *K8SResource) GetResource() isK8SResource_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *K8SResource) GetPod() *metadatapb.Pod {
	if x, ok := m.GetResource().(*K8SResource_Pod); ok {
		return x.Pod
	}
	return nil
}

func (m *K8SResource) GetContainer() *metadatapb.ContainerUpdate {
	if x, ok := m.GetResource().(*K8SResource_Container); ok {
		return x.Container
	}
	return nil
}

func (m *K8SResource) GetService() *metadatapb.Service {
	if x, ok := m.GetResource().(*K8SResource_Service); ok {
		return x.Service
	}
	return nil
}

func (m *K8SResource) GetEndpoints() *metadatapb.Endpoints {
	if x, ok := m.GetResource().(*K8SResource_Endpoints); ok {
		return x.Endpoints
	}
	return nil
}

func (m *K8SResource) GetNamespace() *metadatapb.Namespace {
	if x, ok := m.GetResource().(*K8SResource_Namespace); ok {
		return x.Namespace
	}
	return nil
}

func (m *K8SResource) GetNode() *metadatapb.Node {
	if x, ok := m.GetResource().(*K8SResource_Node); ok {
		return x.Node
	}
	return nil
}

func (m *K8SResource) GetReplicaSet() *metadatapb.ReplicaSet {
	if x, ok := m.GetResource().(*K8SResource_ReplicaSet); ok {
		return x.ReplicaSet
	}
	return nil
}

func (m *K8SResource) GetDeployment() *metadatapb.Deployment {
	if x, ok := m.GetResource().(*K8SResource_Deployment); ok {
		return x.Deployment
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*K8SResource) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*K8SResource_Pod)(nil),
		(*K8SResource_Container)(nil),
		(*K8SResource_Service)(nil),
		(*K8SResource_Endpoints)(nil),
		(*K8SResource_Namespace)(nil),
		(*K8SResource_Node)(nil),
		(*K8SResource_ReplicaSet)(nil),
		(*K8SResource_Deployment)(nil),
	}
}

type K8SResourceUpdate struct {
	Update *metadatapb.ResourceUpdate `protobuf:"bytes,1,opt,name=update,proto3" json:"update,omitempty"`
}

func (m *K8SResourceUpdate) Reset()      { *m = K8SResourceUpdate{} }
func (*K8SResourceUpdate) ProtoMessage() {}
func (*K8SResourceUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ea71ea705227d1, []int{5}
}
func (m *K8SResourceUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *K8SResourceUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_K8SResourceUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *K8SResourceUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_K8SResourceUpdate.Merge(m, src)
}
func (m *K8SResourceUpdate) XXX_Size() int {
	return m.Size()
}
func (m *K8SResourceUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_K8SResourceUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_K8SResourceUpdate proto.InternalMessageInfo

func (m *K8SResourceUpdate) GetUpdate() *metadatapb.ResourceUpdate {
	if m != nil {
		return m.Update
	}
	return nil
}

type CronScriptResult struct {
	ScriptID          *uuidpb.UUID     `protobuf:"bytes,1,opt,name=script_id,json=scriptId,proto3" json:"script_id,omitempty"`
	Timestamp         *types.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Error             *statuspb.Status `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	ExecutionTimeNs   int64            `protobuf:"varint,4,opt,name=execution_time_ns,json=executionTimeNs,proto3" json:"execution_time_ns,omitempty"`
	CompilationTimeNs int64            `protobuf:"varint,5,opt,name=compilation_time_ns,json=compilationTimeNs,proto3" json:"compilation_time_ns,omitempty"`
	BytesProcessed    int64            `protobuf:"varint,6,opt,name=bytes_processed,json=bytesProcessed,proto3" json:"bytes_processed,omitempty"`
	RecordsProcessed  int64            `protobuf:"varint,7,opt,name=records_processed,json=recordsProcessed,proto3" json:"records_processed,omitempty"`
}

func (m *CronScriptResult) Reset()      { *m = CronScriptResult{} }
func (*CronScriptResult) ProtoMessage() {}
func (*CronScriptResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ea71ea705227d1, []int{6}
}
func (m *CronScriptResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CronScriptResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CronScriptResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CronScriptResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CronScriptResult.Merge(m, src)
}
func (m *CronScriptResult) XXX_Size() int {
	return m.Size()
}
func (m *CronScriptResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CronScriptResult.DiscardUnknown(m)
}

var xxx_messageInfo_CronScriptResult proto.InternalMessageInfo

func (m *CronScriptResult) GetScriptID() *uuidpb.UUID {
	if m != nil {
		return m.ScriptID
	}
	return nil
}

func (m *CronScriptResult) GetTimestamp() *types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *CronScriptResult) GetError() *statuspb.Status {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *CronScriptResult) GetExecutionTimeNs() int64 {
	if m != nil {
		return m.ExecutionTimeNs
	}
	return 0
}

func (m *CronScriptResult) GetCompilationTimeNs() int64 {
	if m != nil {
		return m.CompilationTimeNs
	}
	return 0
}

func (m *CronScriptResult) GetBytesProcessed() int64 {
	if m != nil {
		return m.BytesProcessed
	}
	return 0
}

func (m *CronScriptResult) GetRecordsProcessed() int64 {
	if m != nil {
		return m.RecordsProcessed
	}
	return 0
}

func init() {
	proto.RegisterType((*TracepointInfo)(nil), "px.vizier.services.metadata.TracepointInfo")
	proto.RegisterType((*AgentTracepointStatus)(nil), "px.vizier.services.metadata.AgentTracepointStatus")
	proto.RegisterType((*TableInfo)(nil), "px.vizier.services.metadata.TableInfo")
	proto.RegisterType((*TableInfo_ColumnInfo)(nil), "px.vizier.services.metadata.TableInfo.ColumnInfo")
	proto.RegisterType((*ComputedSchema)(nil), "px.vizier.services.metadata.ComputedSchema")
	proto.RegisterMapType((map[string]*ComputedSchema_AgentIDs)(nil), "px.vizier.services.metadata.ComputedSchema.TableNameToAgentIdsEntry")
	proto.RegisterType((*ComputedSchema_AgentIDs)(nil), "px.vizier.services.metadata.ComputedSchema.AgentIDs")
	proto.RegisterType((*K8SResource)(nil), "px.vizier.services.metadata.K8sResource")
	proto.RegisterType((*K8SResourceUpdate)(nil), "px.vizier.services.metadata.K8sResourceUpdate")
	proto.RegisterType((*CronScriptResult)(nil), "px.vizier.services.metadata.CronScriptResult")
}

func init() {
	proto.RegisterFile("src/vizier/services/metadata/storepb/store.proto", fileDescriptor_27ea71ea705227d1)
}

var fileDescriptor_27ea71ea705227d1 = []byte{
	// 1283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0xc6, 0x4e, 0x62, 0x3f, 0xb7, 0xf9, 0x33, 0xa1, 0xd4, 0x4a, 0xc5, 0x3a, 0x98, 0x42,
	0x5d, 0x2a, 0x76, 0x69, 0xa8, 0x44, 0x54, 0x54, 0xfe, 0xd8, 0x2e, 0xc4, 0x14, 0x45, 0xd5, 0x3a,
	0xb9, 0x70, 0x59, 0x8d, 0x77, 0xa7, 0xee, 0xaa, 0xde, 0x9d, 0xd1, 0xcc, 0xb8, 0x8a, 0x2b, 0x0e,
	0x7c, 0x04, 0x24, 0x3e, 0x04, 0x70, 0xe4, 0x5b, 0x70, 0xec, 0xb1, 0x48, 0x28, 0xa2, 0xae, 0x90,
	0x38, 0xf6, 0xc2, 0x1d, 0xcd, 0xcc, 0xfe, 0xb1, 0x69, 0x93, 0x96, 0x8b, 0xfd, 0x66, 0xe6, 0xf7,
	0xfb, 0xcd, 0x7b, 0x6f, 0xde, 0xbc, 0x59, 0xf8, 0x50, 0xf0, 0xc0, 0x7d, 0x18, 0x3d, 0x8a, 0x08,
	0x77, 0x05, 0xe1, 0x0f, 0xa3, 0x80, 0x08, 0x37, 0x26, 0x12, 0x87, 0x58, 0x62, 0x57, 0x48, 0xca,
	0x09, 0x1b, 0x9a, 0x7f, 0x87, 0x71, 0x2a, 0x29, 0xba, 0xc4, 0x8e, 0x1d, 0x43, 0x70, 0x32, 0x82,
	0x93, 0x11, 0xb6, 0x3f, 0x18, 0x45, 0xf2, 0xfe, 0x64, 0xe8, 0x04, 0x34, 0x76, 0x47, 0x74, 0x44,
	0x5d, 0xcd, 0x19, 0x4e, 0xee, 0xe9, 0x91, 0x1e, 0x68, 0xcb, 0x68, 0x6d, 0x37, 0x47, 0x94, 0x8e,
	0xc6, 0xa4, 0x40, 0xc9, 0x28, 0x26, 0x42, 0xe2, 0x98, 0x65, 0x00, 0xe5, 0x1e, 0x66, 0x91, 0x41,
	0xb8, 0x93, 0x49, 0x14, 0xb2, 0xa1, 0xfe, 0x4b, 0x01, 0xb7, 0x14, 0x20, 0xc0, 0x3c, 0xa1, 0xd2,
	0x65, 0x63, 0x9c, 0x24, 0x84, 0xbb, 0xe1, 0x34, 0xc1, 0x71, 0x14, 0xf8, 0x92, 0xe3, 0x20, 0x4a,
	0x46, 0x6e, 0xc4, 0xdd, 0x31, 0x1d, 0x45, 0x01, 0x1e, 0xb3, 0x61, 0x66, 0xa5, 0xf4, 0x77, 0x35,
	0x9d, 0xc6, 0x31, 0x4d, 0xdc, 0x21, 0x16, 0xc4, 0x15, 0x12, 0xcb, 0x89, 0xd0, 0x21, 0x2b, 0x23,
	0x85, 0xb5, 0x15, 0x4c, 0xdc, 0xc7, 0x9c, 0x84, 0xee, 0x83, 0xbd, 0x22, 0x41, 0x6c, 0x98, 0x9b,
	0x29, 0xf2, 0xf2, 0x1c, 0x52, 0x4e, 0x19, 0x11, 0xe6, 0x97, 0x0d, 0xcd, 0xbf, 0x41, 0xb5, 0xfe,
	0xb1, 0x60, 0xed, 0x90, 0xe3, 0x80, 0x30, 0x1a, 0x25, 0xb2, 0x9f, 0xdc, 0xa3, 0xe8, 0x0a, 0x2c,
	0x45, 0x61, 0xc3, 0xda, 0xb1, 0xda, 0xf5, 0xdd, 0x75, 0x87, 0x1d, 0x3b, 0x26, 0x56, 0xe7, 0xe8,
	0xa8, 0xdf, 0xeb, 0xac, 0xcc, 0x4e, 0x9a, 0x4b, 0xfd, 0x9e, 0xb7, 0x14, 0x85, 0x68, 0x08, 0x20,
	0x73, 0x6a, 0x63, 0x49, 0x13, 0x3a, 0x8a, 0x60, 0xb2, 0xe0, 0xa4, 0x59, 0x70, 0xfe, 0x93, 0x05,
	0x27, 0xe2, 0x4e, 0x16, 0x7b, 0xb1, 0x75, 0x8f, 0xb0, 0x31, 0x9d, 0xc6, 0x24, 0x91, 0xde, 0x9c,
	0x2a, 0x42, 0x50, 0x49, 0x70, 0x4c, 0x1a, 0xe5, 0x1d, 0xab, 0x5d, 0xf3, 0xb4, 0x8d, 0x3a, 0xb0,
	0x46, 0x8e, 0x19, 0x09, 0x24, 0x09, 0x7d, 0x95, 0x1c, 0xd2, 0xa8, 0xec, 0x58, 0xed, 0xb5, 0xdd,
	0x4b, 0x6a, 0xef, 0x2c, 0x6d, 0xce, 0x37, 0xd1, 0x3d, 0xd2, 0x9d, 0x06, 0x63, 0x32, 0x50, 0x10,
	0xef, 0x7c, 0x46, 0xd1, 0xc3, 0xd6, 0xef, 0x16, 0x5c, 0xf8, 0x62, 0x44, 0x12, 0x59, 0x78, 0x30,
	0xd0, 0x4c, 0x74, 0x1d, 0x96, 0x8d, 0xa8, 0xf5, 0x6a, 0x51, 0x83, 0x44, 0xd7, 0x60, 0xc5, 0x20,
	0xd2, 0x24, 0x6c, 0x2d, 0x70, 0x8c, 0xae, 0x97, 0x42, 0xd2, 0xf4, 0x96, 0x5f, 0x9d, 0xde, 0x8f,
	0xa1, 0x8a, 0x95, 0x87, 0x7e, 0x14, 0xea, 0x00, 0x5f, 0x02, 0xaf, 0xcf, 0x4e, 0x9a, 0xab, 0x3a,
	0x8c, 0x7e, 0xcf, 0x5b, 0xd5, 0xe8, 0x7e, 0xd8, 0xfa, 0xb5, 0x02, 0xb5, 0x43, 0x3c, 0x1c, 0x13,
	0x7d, 0x9c, 0x59, 0x06, 0xad, 0xb9, 0x0c, 0x22, 0xa8, 0x84, 0x44, 0x04, 0x8d, 0x55, 0x33, 0xa7,
	0x6c, 0xd4, 0x01, 0x24, 0x24, 0xe6, 0xd2, 0xcf, 0x2b, 0xdf, 0x4f, 0x4c, 0x40, 0xe5, 0xce, 0x1b,
	0xb3, 0x93, 0xe6, 0xc6, 0x40, 0xad, 0x1e, 0x66, 0x8b, 0x07, 0x03, 0x6f, 0x43, 0x2c, 0xce, 0x08,
	0xf4, 0x19, 0x6c, 0x0a, 0x49, 0xd9, 0xa2, 0x44, 0x59, 0x4b, 0x6c, 0xcd, 0x4e, 0x9a, 0xeb, 0x03,
	0x49, 0xd9, 0xbc, 0xc2, 0xba, 0x58, 0x98, 0x10, 0xe8, 0x0e, 0xac, 0x06, 0x74, 0x3c, 0x89, 0x13,
	0xd1, 0xa8, 0xec, 0x94, 0xdb, 0xf5, 0xdd, 0xeb, 0xce, 0x19, 0x97, 0xdc, 0xc9, 0xa3, 0x74, 0xba,
	0x9a, 0xa5, 0x4c, 0x2f, 0x53, 0x40, 0x36, 0x80, 0x54, 0x00, 0x19, 0x3d, 0x22, 0x61, 0x63, 0x79,
	0xc7, 0x6a, 0x57, 0xbd, 0xb9, 0x19, 0x74, 0x0d, 0x36, 0xb3, 0x11, 0x96, 0x11, 0x4d, 0xfc, 0x07,
	0x64, 0xda, 0x58, 0xd1, 0x29, 0xd9, 0x58, 0x58, 0xb8, 0x43, 0xa6, 0xdb, 0x7f, 0x58, 0x00, 0xc5,
	0x26, 0x2f, 0xcd, 0xaa, 0x0b, 0x35, 0xe5, 0x95, 0xaf, 0xee, 0x97, 0x4e, 0xdc, 0xda, 0x2e, 0x52,
	0xee, 0x9b, 0xfb, 0xd6, 0xc3, 0x12, 0x1f, 0x4e, 0x19, 0xf1, 0xaa, 0x61, 0x6a, 0xa1, 0x3d, 0x38,
	0xc7, 0xb0, 0x94, 0x84, 0x27, 0x86, 0x53, 0xd6, 0x9c, 0x0b, 0x05, 0xe7, 0xae, 0x59, 0xd5, 0xb4,
	0x3a, 0x2b, 0x06, 0xf9, 0x01, 0x56, 0xe6, 0x0e, 0xf0, 0x13, 0x38, 0x2f, 0x48, 0x8c, 0x13, 0xa9,
	0xae, 0x9a, 0x92, 0x5b, 0xd6, 0x72, 0x6f, 0x16, 0x72, 0x83, 0x74, 0x59, 0xeb, 0x9d, 0x13, 0x73,
	0xa3, 0xd6, 0x2f, 0x65, 0x58, 0xeb, 0xd2, 0x98, 0x4d, 0xd4, 0x0d, 0x09, 0xee, 0x93, 0x18, 0xa3,
	0x4f, 0x61, 0x45, 0x67, 0x41, 0x34, 0x2c, 0x7d, 0x14, 0xef, 0xbd, 0xde, 0x51, 0x78, 0x29, 0x0b,
	0xfd, 0x68, 0xc1, 0x45, 0x6d, 0xfa, 0x2a, 0x3b, 0xbe, 0xa4, 0x7e, 0x56, 0xce, 0xaa, 0xac, 0x94,
	0x62, 0xef, 0x4c, 0xc5, 0x45, 0x77, 0xcc, 0x06, 0x07, 0x38, 0x26, 0x87, 0xd4, 0x54, 0x7c, 0x28,
	0x6e, 0x27, 0x92, 0x4f, 0x3b, 0x17, 0x67, 0x27, 0xcd, 0xad, 0x17, 0x56, 0x7b, 0xc2, 0xdb, 0x92,
	0x2f, 0x52, 0xb6, 0xbb, 0x50, 0xcd, 0x00, 0x0b, 0x37, 0xcc, 0xc4, 0xf8, 0x7a, 0x37, 0x6c, 0xfb,
	0x3b, 0x68, 0x9c, 0xe6, 0x0e, 0xda, 0x80, 0xb2, 0xaa, 0x23, 0x53, 0x18, 0xca, 0x44, 0x5f, 0xc3,
	0xf2, 0x43, 0x3c, 0x9e, 0x90, 0xb4, 0x3b, 0xdc, 0xf8, 0x3f, 0x51, 0xe7, 0xc1, 0x18, 0x89, 0x9b,
	0x4b, 0x7b, 0x56, 0xeb, 0xa7, 0x0a, 0xd4, 0xef, 0xec, 0x09, 0x8f, 0x08, 0x3a, 0xe1, 0x01, 0x41,
	0xd7, 0xa1, 0xcc, 0x68, 0xd6, 0xb1, 0xdf, 0xd2, 0xbd, 0x47, 0xb7, 0x7d, 0xe7, 0xc1, 0x5e, 0x21,
	0xcc, 0x86, 0xce, 0x5d, 0x1a, 0xee, 0x97, 0x3c, 0x85, 0x45, 0x7d, 0xa8, 0x05, 0x34, 0x91, 0x38,
	0x4a, 0x08, 0x4f, 0xdd, 0xba, 0x7a, 0x3a, 0xb1, 0x9b, 0x41, 0x8f, 0x58, 0x88, 0x25, 0xd9, 0x2f,
	0x79, 0x05, 0x1b, 0xdd, 0x82, 0xd5, 0x34, 0x8a, 0xb4, 0xa9, 0xbd, 0x7d, 0xba, 0xd0, 0xc0, 0x00,
	0xf7, 0x4b, 0x5e, 0xc6, 0x41, 0x5d, 0xa8, 0x91, 0x24, 0xd4, 0x0d, 0x58, 0xa4, 0x6d, 0xee, 0x9d,
	0xd3, 0x05, 0x6e, 0x67, 0x50, 0xe5, 0x43, 0xce, 0x53, 0x22, 0xaa, 0xc6, 0x04, 0xc3, 0x81, 0x29,
	0xfb, 0x33, 0x45, 0x0e, 0x32, 0xa8, 0x12, 0xc9, 0x79, 0xe8, 0x06, 0x54, 0x12, 0x1a, 0x12, 0xdd,
	0x01, 0xea, 0xbb, 0xf6, 0x19, 0x7c, 0x1a, 0x2a, 0xaa, 0x46, 0xa3, 0xaf, 0xa0, 0xce, 0x09, 0x1b,
	0x47, 0x01, 0xf6, 0x05, 0x91, 0xba, 0xa3, 0xd6, 0x77, 0x2f, 0x9f, 0x4e, 0xf6, 0x0c, 0x78, 0x40,
	0xe4, 0x7e, 0xc9, 0x03, 0x9e, 0x8f, 0xd0, 0x97, 0x00, 0x61, 0xfe, 0x06, 0x36, 0xaa, 0xaf, 0xd2,
	0x29, 0xde, 0x4b, 0xa5, 0x53, 0x30, 0x3b, 0x00, 0x55, 0x9e, 0x56, 0x46, 0xeb, 0x08, 0x36, 0xe7,
	0x0a, 0xc5, 0x9c, 0x1e, 0xfa, 0x1c, 0x56, 0x26, 0xda, 0x4a, 0x2b, 0xa6, 0x7d, 0x96, 0xb3, 0xf3,
	0x4c, 0x2f, 0xe5, 0xb5, 0xfe, 0x5a, 0x82, 0x8d, 0x2e, 0xa7, 0xc9, 0x20, 0xe0, 0x11, 0x93, 0x1e,
	0x11, 0x93, 0xb1, 0x44, 0x37, 0xa1, 0x26, 0xf4, 0xd8, 0x3f, 0xfd, 0xeb, 0xe1, 0xdc, 0xec, 0xa4,
	0x59, 0x35, 0xac, 0x7e, 0xcf, 0xab, 0x1a, 0x7c, 0x3f, 0x44, 0x7b, 0x50, 0xcb, 0x9f, 0x8c, 0xb4,
	0x1c, 0xb7, 0x1d, 0xf3, 0x45, 0xe6, 0x64, 0x5f, 0x64, 0x4e, 0xfe, 0x4e, 0x78, 0x05, 0x18, 0x5d,
	0x85, 0x65, 0xc2, 0x39, 0xe5, 0x69, 0xed, 0xbd, 0xf4, 0xe5, 0x35, 0x08, 0xf4, 0x3e, 0x6c, 0x92,
	0x63, 0x12, 0x4c, 0x74, 0xab, 0x57, 0x0a, 0x7e, 0x62, 0x2a, 0xae, 0xec, 0xad, 0xe7, 0x0b, 0x6a,
	0x93, 0x03, 0x81, 0x1c, 0xd8, 0x0a, 0x68, 0xcc, 0xa2, 0x31, 0x5e, 0x40, 0x2f, 0x6b, 0xf4, 0xe6,
	0xdc, 0x52, 0x8a, 0xbf, 0x02, 0xeb, 0xc3, 0xa9, 0x24, 0xc2, 0x67, 0x9c, 0x06, 0x44, 0x08, 0x12,
	0xea, 0x32, 0x2a, 0x7b, 0x6b, 0x7a, 0xfa, 0x6e, 0x36, 0xab, 0xde, 0x1c, 0x4e, 0x02, 0xca, 0xc3,
	0x79, 0xe8, 0xaa, 0x86, 0x6e, 0xa4, 0x0b, 0x39, 0xb8, 0x73, 0xeb, 0xf1, 0x53, 0xbb, 0xf4, 0xe4,
	0xa9, 0x5d, 0x7a, 0xfe, 0xd4, 0xb6, 0xbe, 0x9f, 0xd9, 0xd6, 0xcf, 0x33, 0xdb, 0xfa, 0x6d, 0x66,
	0x5b, 0x8f, 0x67, 0xb6, 0xf5, 0xe7, 0xcc, 0xb6, 0xfe, 0x9e, 0xd9, 0xa5, 0xe7, 0x33, 0xdb, 0xfa,
	0xe1, 0x99, 0x5d, 0x7a, 0xfc, 0xcc, 0x2e, 0x3d, 0x79, 0x66, 0x97, 0xbe, 0x5d, 0x4d, 0xbf, 0x95,
	0x87, 0x2b, 0x3a, 0x75, 0x1f, 0xfd, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x84, 0xe1, 0xe7, 0x5a,
	0x0b, 0x00, 0x00,
}

func (this *TracepointInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TracepointInfo)
	if !ok {
		that2, ok := that.(TracepointInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if !this.Tracepoint.Equal(that1.Tracepoint) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.ExpectedState != that1.ExpectedState {
		return false
	}
	return true
}
func (this *AgentTracepointStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentTracepointStatus)
	if !ok {
		that2, ok := that.(AgentTracepointStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if !this.AgentID.Equal(that1.AgentID) {
		return false
	}
	return true
}
func (this *TableInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TableInfo)
	if !ok {
		that2, ok := that.(TableInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Desc != that1.Desc {
		return false
	}
	if this.StartTimestampNS != that1.StartTimestampNS {
		return false
	}
	if this.StopTimestampNS != that1.StopTimestampNS {
		return false
	}
	if len(this.Columns) != len(that1.Columns) {
		return false
	}
	for i := range this.Columns {
		if !this.Columns[i].Equal(that1.Columns[i]) {
			return false
		}
	}
	if this.Tabletized != that1.Tabletized {
		return false
	}
	if this.TabletizationKey != that1.TabletizationKey {
		return false
	}
	return true
}
func (this *TableInfo_ColumnInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TableInfo_ColumnInfo)
	if !ok {
		that2, ok := that.(TableInfo_ColumnInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.DataType != that1.DataType {
		return false
	}
	if this.PatternType != that1.PatternType {
		return false
	}
	if this.Desc != that1.Desc {
		return false
	}
	if this.SemanticType != that1.SemanticType {
		return false
	}
	return true
}
func (this *ComputedSchema) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ComputedSchema)
	if !ok {
		that2, ok := that.(ComputedSchema)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Tables) != len(that1.Tables) {
		return false
	}
	for i := range this.Tables {
		if !this.Tables[i].Equal(that1.Tables[i]) {
			return false
		}
	}
	if len(this.TableNameToAgentIDs) != len(that1.TableNameToAgentIDs) {
		return false
	}
	for i := range this.TableNameToAgentIDs {
		if !this.TableNameToAgentIDs[i].Equal(that1.TableNameToAgentIDs[i]) {
			return false
		}
	}
	return true
}
func (this *ComputedSchema_AgentIDs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ComputedSchema_AgentIDs)
	if !ok {
		that2, ok := that.(ComputedSchema_AgentIDs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AgentID) != len(that1.AgentID) {
		return false
	}
	for i := range this.AgentID {
		if !this.AgentID[i].Equal(that1.AgentID[i]) {
			return false
		}
	}
	return true
}
func (this *K8SResource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*K8SResource)
	if !ok {
		that2, ok := that.(K8SResource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Resource == nil {
		if this.Resource != nil {
			return false
		}
	} else if this.Resource == nil {
		return false
	} else if !this.Resource.Equal(that1.Resource) {
		return false
	}
	return true
}
func (this *K8SResource_Pod) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*K8SResource_Pod)
	if !ok {
		that2, ok := that.(K8SResource_Pod)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pod.Equal(that1.Pod) {
		return false
	}
	return true
}
func (this *K8SResource_Container) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*K8SResource_Container)
	if !ok {
		that2, ok := that.(K8SResource_Container)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Container.Equal(that1.Container) {
		return false
	}
	return true
}
func (this *K8SResource_Service) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*K8SResource_Service)
	if !ok {
		that2, ok := that.(K8SResource_Service)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Service.Equal(that1.Service) {
		return false
	}
	return true
}
func (this *K8SResource_Endpoints) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*K8SResource_Endpoints)
	if !ok {
		that2, ok := that.(K8SResource_Endpoints)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Endpoints.Equal(that1.Endpoints) {
		return false
	}
	return true
}
func (this *K8SResource_Namespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*K8SResource_Namespace)
	if !ok {
		that2, ok := that.(K8SResource_Namespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Namespace.Equal(that1.Namespace) {
		return false
	}
	return true
}
func (this *K8SResource_Node) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*K8SResource_Node)
	if !ok {
		that2, ok := that.(K8SResource_Node)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Node.Equal(that1.Node) {
		return false
	}
	return true
}
func (this *K8SResource_ReplicaSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*K8SResource_ReplicaSet)
	if !ok {
		that2, ok := that.(K8SResource_ReplicaSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReplicaSet.Equal(that1.ReplicaSet) {
		return false
	}
	return true
}
func (this *K8SResource_Deployment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*K8SResource_Deployment)
	if !ok {
		that2, ok := that.(K8SResource_Deployment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Deployment.Equal(that1.Deployment) {
		return false
	}
	return true
}
func (this *K8SResourceUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*K8SResourceUpdate)
	if !ok {
		that2, ok := that.(K8SResourceUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Update.Equal(that1.Update) {
		return false
	}
	return true
}
func (this *CronScriptResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CronScriptResult)
	if !ok {
		that2, ok := that.(CronScriptResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ScriptID.Equal(that1.ScriptID) {
		return false
	}
	if !this.Timestamp.Equal(that1.Timestamp) {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	if this.ExecutionTimeNs != that1.ExecutionTimeNs {
		return false
	}
	if this.CompilationTimeNs != that1.CompilationTimeNs {
		return false
	}
	if this.BytesProcessed != that1.BytesProcessed {
		return false
	}
	if this.RecordsProcessed != that1.RecordsProcessed {
		return false
	}
	return true
}
func (this *TracepointInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&storepb.TracepointInfo{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	if this.Tracepoint != nil {
		s = append(s, "Tracepoint: "+fmt.Sprintf("%#v", this.Tracepoint)+",\n")
	}
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "ExpectedState: "+fmt.Sprintf("%#v", this.ExpectedState)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentTracepointStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&storepb.AgentTracepointStatus{")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	if this.AgentID != nil {
		s = append(s, "AgentID: "+fmt.Sprintf("%#v", this.AgentID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TableInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&storepb.TableInfo{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Desc: "+fmt.Sprintf("%#v", this.Desc)+",\n")
	s = append(s, "StartTimestampNS: "+fmt.Sprintf("%#v", this.StartTimestampNS)+",\n")
	s = append(s, "StopTimestampNS: "+fmt.Sprintf("%#v", this.StopTimestampNS)+",\n")
	if this.Columns != nil {
		s = append(s, "Columns: "+fmt.Sprintf("%#v", this.Columns)+",\n")
	}
	s = append(s, "Tabletized: "+fmt.Sprintf("%#v", this.Tabletized)+",\n")
	s = append(s, "TabletizationKey: "+fmt.Sprintf("%#v", this.TabletizationKey)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TableInfo_ColumnInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&storepb.TableInfo_ColumnInfo{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "DataType: "+fmt.Sprintf("%#v", this.DataType)+",\n")
	s = append(s, "PatternType: "+fmt.Sprintf("%#v", this.PatternType)+",\n")
	s = append(s, "Desc: "+fmt.Sprintf("%#v", this.Desc)+",\n")
	s = append(s, "SemanticType: "+fmt.Sprintf("%#v", this.SemanticType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ComputedSchema) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&storepb.ComputedSchema{")
	if this.Tables != nil {
		s = append(s, "Tables: "+fmt.Sprintf("%#v", this.Tables)+",\n")
	}
	keysForTableNameToAgentIDs := make([]string, 0, len(this.TableNameToAgentIDs))
	for k, _ := range this.TableNameToAgentIDs {
		keysForTableNameToAgentIDs = append(keysForTableNameToAgentIDs, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTableNameToAgentIDs)
	mapStringForTableNameToAgentIDs := "map[string]*ComputedSchema_AgentIDs{"
	for _, k := range keysForTableNameToAgentIDs {
		mapStringForTableNameToAgentIDs += fmt.Sprintf("%#v: %#v,", k, this.TableNameToAgentIDs[k])
	}
	mapStringForTableNameToAgentIDs += "}"
	if this.TableNameToAgentIDs != nil {
		s = append(s, "TableNameToAgentIDs: "+mapStringForTableNameToAgentIDs+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ComputedSchema_AgentIDs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&storepb.ComputedSchema_AgentIDs{")
	if this.AgentID != nil {
		s = append(s, "AgentID: "+fmt.Sprintf("%#v", this.AgentID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *K8SResource) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&storepb.K8SResource{")
	if this.Resource != nil {
		s = append(s, "Resource: "+fmt.Sprintf("%#v", this.Resource)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *K8SResource_Pod) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&storepb.K8SResource_Pod{` +
		`Pod:` + fmt.Sprintf("%#v", this.Pod) + `}`}, ", ")
	return s
}
func (this *K8SResource_Container) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&storepb.K8SResource_Container{` +
		`Container:` + fmt.Sprintf("%#v", this.Container) + `}`}, ", ")
	return s
}
func (this *K8SResource_Service) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&storepb.K8SResource_Service{` +
		`Service:` + fmt.Sprintf("%#v", this.Service) + `}`}, ", ")
	return s
}
func (this *K8SResource_Endpoints) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&storepb.K8SResource_Endpoints{` +
		`Endpoints:` + fmt.Sprintf("%#v", this.Endpoints) + `}`}, ", ")
	return s
}
func (this *K8SResource_Namespace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&storepb.K8SResource_Namespace{` +
		`Namespace:` + fmt.Sprintf("%#v", this.Namespace) + `}`}, ", ")
	return s
}
func (this *K8SResource_Node) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&storepb.K8SResource_Node{` +
		`Node:` + fmt.Sprintf("%#v", this.Node) + `}`}, ", ")
	return s
}
func (this *K8SResource_ReplicaSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&storepb.K8SResource_ReplicaSet{` +
		`ReplicaSet:` + fmt.Sprintf("%#v", this.ReplicaSet) + `}`}, ", ")
	return s
}
func (this *K8SResource_Deployment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&storepb.K8SResource_Deployment{` +
		`Deployment:` + fmt.Sprintf("%#v", this.Deployment) + `}`}, ", ")
	return s
}
func (this *K8SResourceUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&storepb.K8SResourceUpdate{")
	if this.Update != nil {
		s = append(s, "Update: "+fmt.Sprintf("%#v", this.Update)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CronScriptResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&storepb.CronScriptResult{")
	if this.ScriptID != nil {
		s = append(s, "ScriptID: "+fmt.Sprintf("%#v", this.ScriptID)+",\n")
	}
	if this.Timestamp != nil {
		s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	}
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "ExecutionTimeNs: "+fmt.Sprintf("%#v", this.ExecutionTimeNs)+",\n")
	s = append(s, "CompilationTimeNs: "+fmt.Sprintf("%#v", this.CompilationTimeNs)+",\n")
	s = append(s, "BytesProcessed: "+fmt.Sprintf("%#v", this.BytesProcessed)+",\n")
	s = append(s, "RecordsProcessed: "+fmt.Sprintf("%#v", this.RecordsProcessed)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringStore(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TracepointInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TracepointInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TracepointInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpectedState != 0 {
		i = encodeVarintStore(dAtA, i, uint64(m.ExpectedState))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintStore(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Tracepoint != nil {
		{
			size, err := m.Tracepoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AgentTracepointStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentTracepointStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentTracepointStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AgentID != nil {
		{
			size, err := m.AgentID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.State != 0 {
		i = encodeVarintStore(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TableInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintStore(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TabletizationKey) > 0 {
		i -= len(m.TabletizationKey)
		copy(dAtA[i:], m.TabletizationKey)
		i = encodeVarintStore(dAtA, i, uint64(len(m.TabletizationKey)))
		i--
		dAtA[i] = 0x32
	}
	if m.Tabletized {
		i--
		if m.Tabletized {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Columns) > 0 {
		for iNdEx := len(m.Columns) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Columns[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStore(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.StopTimestampNS != 0 {
		i = encodeVarintStore(dAtA, i, uint64(m.StopTimestampNS))
		i--
		dAtA[i] = 0x18
	}
	if m.StartTimestampNS != 0 {
		i = encodeVarintStore(dAtA, i, uint64(m.StartTimestampNS))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintStore(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TableInfo_ColumnInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableInfo_ColumnInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableInfo_ColumnInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SemanticType != 0 {
		i = encodeVarintStore(dAtA, i, uint64(m.SemanticType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintStore(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x22
	}
	if m.PatternType != 0 {
		i = encodeVarintStore(dAtA, i, uint64(m.PatternType))
		i--
		dAtA[i] = 0x18
	}
	if m.DataType != 0 {
		i = encodeVarintStore(dAtA, i, uint64(m.DataType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintStore(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComputedSchema) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComputedSchema) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComputedSchema) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TableNameToAgentIDs) > 0 {
		for k := range m.TableNameToAgentIDs {
			v := m.TableNameToAgentIDs[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintStore(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintStore(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintStore(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Tables) > 0 {
		for iNdEx := len(m.Tables) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tables[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStore(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ComputedSchema_AgentIDs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComputedSchema_AgentIDs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComputedSchema_AgentIDs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AgentID) > 0 {
		for iNdEx := len(m.AgentID) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AgentID[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStore(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *K8SResource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *K8SResource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *K8SResource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Resource != nil {
		{
			size := m.Resource.Size()
			i -= size
			if _, err := m.Resource.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *K8SResource_Pod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *K8SResource_Pod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Pod != nil {
		{
			size, err := m.Pod.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *K8SResource_Container) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *K8SResource_Container) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Container != nil {
		{
			size, err := m.Container.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *K8SResource_Service) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *K8SResource_Service) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Service != nil {
		{
			size, err := m.Service.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *K8SResource_Endpoints) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *K8SResource_Endpoints) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Endpoints != nil {
		{
			size, err := m.Endpoints.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *K8SResource_Namespace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *K8SResource_Namespace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Namespace != nil {
		{
			size, err := m.Namespace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *K8SResource_Node) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *K8SResource_Node) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Node != nil {
		{
			size, err := m.Node.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *K8SResource_ReplicaSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *K8SResource_ReplicaSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReplicaSet != nil {
		{
			size, err := m.ReplicaSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *K8SResource_Deployment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *K8SResource_Deployment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Deployment != nil {
		{
			size, err := m.Deployment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *K8SResourceUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *K8SResourceUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *K8SResourceUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Update != nil {
		{
			size, err := m.Update.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CronScriptResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CronScriptResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CronScriptResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RecordsProcessed != 0 {
		i = encodeVarintStore(dAtA, i, uint64(m.RecordsProcessed))
		i--
		dAtA[i] = 0x38
	}
	if m.BytesProcessed != 0 {
		i = encodeVarintStore(dAtA, i, uint64(m.BytesProcessed))
		i--
		dAtA[i] = 0x30
	}
	if m.CompilationTimeNs != 0 {
		i = encodeVarintStore(dAtA, i, uint64(m.CompilationTimeNs))
		i--
		dAtA[i] = 0x28
	}
	if m.ExecutionTimeNs != 0 {
		i = encodeVarintStore(dAtA, i, uint64(m.ExecutionTimeNs))
		i--
		dAtA[i] = 0x20
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ScriptID != nil {
		{
			size, err := m.ScriptID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStore(dAtA []byte, offset int, v uint64) int {
	offset -= sovStore(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TracepointInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovStore(uint64(l))
	}
	if m.Tracepoint != nil {
		l = m.Tracepoint.Size()
		n += 1 + l + sovStore(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStore(uint64(l))
	}
	if m.ExpectedState != 0 {
		n += 1 + sovStore(uint64(m.ExpectedState))
	}
	return n
}

func (m *AgentTracepointStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovStore(uint64(m.State))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovStore(uint64(l))
	}
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovStore(uint64(l))
	}
	if m.AgentID != nil {
		l = m.AgentID.Size()
		n += 1 + l + sovStore(uint64(l))
	}
	return n
}

func (m *TableInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStore(uint64(l))
	}
	if m.StartTimestampNS != 0 {
		n += 1 + sovStore(uint64(m.StartTimestampNS))
	}
	if m.StopTimestampNS != 0 {
		n += 1 + sovStore(uint64(m.StopTimestampNS))
	}
	if len(m.Columns) > 0 {
		for _, e := range m.Columns {
			l = e.Size()
			n += 1 + l + sovStore(uint64(l))
		}
	}
	if m.Tabletized {
		n += 2
	}
	l = len(m.TabletizationKey)
	if l > 0 {
		n += 1 + l + sovStore(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovStore(uint64(l))
	}
	return n
}

func (m *TableInfo_ColumnInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStore(uint64(l))
	}
	if m.DataType != 0 {
		n += 1 + sovStore(uint64(m.DataType))
	}
	if m.PatternType != 0 {
		n += 1 + sovStore(uint64(m.PatternType))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovStore(uint64(l))
	}
	if m.SemanticType != 0 {
		n += 1 + sovStore(uint64(m.SemanticType))
	}
	return n
}

func (m *ComputedSchema) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tables) > 0 {
		for _, e := range m.Tables {
			l = e.Size()
			n += 1 + l + sovStore(uint64(l))
		}
	}
	if len(m.TableNameToAgentIDs) > 0 {
		for k, v := range m.TableNameToAgentIDs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovStore(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovStore(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovStore(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ComputedSchema_AgentIDs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AgentID) > 0 {
		for _, e := range m.AgentID {
			l = e.Size()
			n += 1 + l + sovStore(uint64(l))
		}
	}
	return n
}

func (m *K8SResource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resource != nil {
		n += m.Resource.Size()
	}
	return n
}

func (m *K8SResource_Pod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pod != nil {
		l = m.Pod.Size()
		n += 1 + l + sovStore(uint64(l))
	}
	return n
}
func (m *K8SResource_Container) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Container != nil {
		l = m.Container.Size()
		n += 1 + l + sovStore(uint64(l))
	}
	return n
}
func (m *K8SResource_Service) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Service != nil {
		l = m.Service.Size()
		n += 1 + l + sovStore(uint64(l))
	}
	return n
}
func (m *K8SResource_Endpoints) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Endpoints != nil {
		l = m.Endpoints.Size()
		n += 1 + l + sovStore(uint64(l))
	}
	return n
}
func (m *K8SResource_Namespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Namespace != nil {
		l = m.Namespace.Size()
		n += 1 + l + sovStore(uint64(l))
	}
	return n
}
func (m *K8SResource_Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovStore(uint64(l))
	}
	return n
}
func (m *K8SResource_ReplicaSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReplicaSet != nil {
		l = m.ReplicaSet.Size()
		n += 1 + l + sovStore(uint64(l))
	}
	return n
}
func (m *K8SResource_Deployment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Deployment != nil {
		l = m.Deployment.Size()
		n += 1 + l + sovStore(uint64(l))
	}
	return n
}
func (m *K8SResourceUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Update != nil {
		l = m.Update.Size()
		n += 1 + l + sovStore(uint64(l))
	}
	return n
}

func (m *CronScriptResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScriptID != nil {
		l = m.ScriptID.Size()
		n += 1 + l + sovStore(uint64(l))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovStore(uint64(l))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovStore(uint64(l))
	}
	if m.ExecutionTimeNs != 0 {
		n += 1 + sovStore(uint64(m.ExecutionTimeNs))
	}
	if m.CompilationTimeNs != 0 {
		n += 1 + sovStore(uint64(m.CompilationTimeNs))
	}
	if m.BytesProcessed != 0 {
		n += 1 + sovStore(uint64(m.BytesProcessed))
	}
	if m.RecordsProcessed != 0 {
		n += 1 + sovStore(uint64(m.RecordsProcessed))
	}
	return n
}

func sovStore(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStore(x uint64) (n int) {
	return sovStore(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TracepointInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TracepointInfo{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "uuidpb.UUID", 1) + `,`,
		`Tracepoint:` + strings.Replace(fmt.Sprintf("%v", this.Tracepoint), "TracepointDeployment", "logicalpb.TracepointDeployment", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ExpectedState:` + fmt.Sprintf("%v", this.ExpectedState) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentTracepointStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentTracepointStatus{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "statuspb.Status", 1) + `,`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "uuidpb.UUID", 1) + `,`,
		`AgentID:` + strings.Replace(fmt.Sprintf("%v", this.AgentID), "UUID", "uuidpb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TableInfo) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForColumns := "[]*TableInfo_ColumnInfo{"
	for _, f := range this.Columns {
		repeatedStringForColumns += strings.Replace(fmt.Sprintf("%v", f), "TableInfo_ColumnInfo", "TableInfo_ColumnInfo", 1) + ","
	}
	repeatedStringForColumns += "}"
	s := strings.Join([]string{`&TableInfo{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`StartTimestampNS:` + fmt.Sprintf("%v", this.StartTimestampNS) + `,`,
		`StopTimestampNS:` + fmt.Sprintf("%v", this.StopTimestampNS) + `,`,
		`Columns:` + repeatedStringForColumns + `,`,
		`Tabletized:` + fmt.Sprintf("%v", this.Tabletized) + `,`,
		`TabletizationKey:` + fmt.Sprintf("%v", this.TabletizationKey) + `,`,
		`Desc:` + fmt.Sprintf("%v", this.Desc) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TableInfo_ColumnInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TableInfo_ColumnInfo{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`DataType:` + fmt.Sprintf("%v", this.DataType) + `,`,
		`PatternType:` + fmt.Sprintf("%v", this.PatternType) + `,`,
		`Desc:` + fmt.Sprintf("%v", this.Desc) + `,`,
		`SemanticType:` + fmt.Sprintf("%v", this.SemanticType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ComputedSchema) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTables := "[]*TableInfo{"
	for _, f := range this.Tables {
		repeatedStringForTables += strings.Replace(f.String(), "TableInfo", "TableInfo", 1) + ","
	}
	repeatedStringForTables += "}"
	keysForTableNameToAgentIDs := make([]string, 0, len(this.TableNameToAgentIDs))
	for k, _ := range this.TableNameToAgentIDs {
		keysForTableNameToAgentIDs = append(keysForTableNameToAgentIDs, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTableNameToAgentIDs)
	mapStringForTableNameToAgentIDs := "map[string]*ComputedSchema_AgentIDs{"
	for _, k := range keysForTableNameToAgentIDs {
		mapStringForTableNameToAgentIDs += fmt.Sprintf("%v: %v,", k, this.TableNameToAgentIDs[k])
	}
	mapStringForTableNameToAgentIDs += "}"
	s := strings.Join([]string{`&ComputedSchema{`,
		`Tables:` + repeatedStringForTables + `,`,
		`TableNameToAgentIDs:` + mapStringForTableNameToAgentIDs + `,`,
		`}`,
	}, "")
	return s
}
func (this *ComputedSchema_AgentIDs) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAgentID := "[]*UUID{"
	for _, f := range this.AgentID {
		repeatedStringForAgentID += strings.Replace(fmt.Sprintf("%v", f), "UUID", "uuidpb.UUID", 1) + ","
	}
	repeatedStringForAgentID += "}"
	s := strings.Join([]string{`&ComputedSchema_AgentIDs{`,
		`AgentID:` + repeatedStringForAgentID + `,`,
		`}`,
	}, "")
	return s
}
func (this *K8SResource) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&K8SResource{`,
		`Resource:` + fmt.Sprintf("%v", this.Resource) + `,`,
		`}`,
	}, "")
	return s
}
func (this *K8SResource_Pod) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&K8SResource_Pod{`,
		`Pod:` + strings.Replace(fmt.Sprintf("%v", this.Pod), "Pod", "metadatapb.Pod", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *K8SResource_Container) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&K8SResource_Container{`,
		`Container:` + strings.Replace(fmt.Sprintf("%v", this.Container), "ContainerUpdate", "metadatapb.ContainerUpdate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *K8SResource_Service) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&K8SResource_Service{`,
		`Service:` + strings.Replace(fmt.Sprintf("%v", this.Service), "Service", "metadatapb.Service", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *K8SResource_Endpoints) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&K8SResource_Endpoints{`,
		`Endpoints:` + strings.Replace(fmt.Sprintf("%v", this.Endpoints), "Endpoints", "metadatapb.Endpoints", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *K8SResource_Namespace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&K8SResource_Namespace{`,
		`Namespace:` + strings.Replace(fmt.Sprintf("%v", this.Namespace), "Namespace", "metadatapb.Namespace", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *K8SResource_Node) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&K8SResource_Node{`,
		`Node:` + strings.Replace(fmt.Sprintf("%v", this.Node), "Node", "metadatapb.Node", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *K8SResource_ReplicaSet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&K8SResource_ReplicaSet{`,
		`ReplicaSet:` + strings.Replace(fmt.Sprintf("%v", this.ReplicaSet), "ReplicaSet", "metadatapb.ReplicaSet", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *K8SResource_Deployment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&K8SResource_Deployment{`,
		`Deployment:` + strings.Replace(fmt.Sprintf("%v", this.Deployment), "Deployment", "metadatapb.Deployment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *K8SResourceUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&K8SResourceUpdate{`,
		`Update:` + strings.Replace(fmt.Sprintf("%v", this.Update), "ResourceUpdate", "metadatapb.ResourceUpdate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CronScriptResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CronScriptResult{`,
		`ScriptID:` + strings.Replace(fmt.Sprintf("%v", this.ScriptID), "UUID", "uuidpb.UUID", 1) + `,`,
		`Timestamp:` + strings.Replace(fmt.Sprintf("%v", this.Timestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Status", "statuspb.Status", 1) + `,`,
		`ExecutionTimeNs:` + fmt.Sprintf("%v", this.ExecutionTimeNs) + `,`,
		`CompilationTimeNs:` + fmt.Sprintf("%v", this.CompilationTimeNs) + `,`,
		`BytesProcessed:` + fmt.Sprintf("%v", this.BytesProcessed) + `,`,
		`RecordsProcessed:` + fmt.Sprintf("%v", this.RecordsProcessed) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringStore(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TracepointInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TracepointInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TracepointInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &uuidpb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tracepoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tracepoint == nil {
				m.Tracepoint = &logicalpb.TracepointDeployment{}
			}
			if err := m.Tracepoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedState", wireType)
			}
			m.ExpectedState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpectedState |= statuspb.LifeCycleState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentTracepointStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentTracepointStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentTracepointStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= statuspb.LifeCycleState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &statuspb.Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &uuidpb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentID == nil {
				m.AgentID = &uuidpb.UUID{}
			}
			if err := m.AgentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimestampNS", wireType)
			}
			m.StartTimestampNS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTimestampNS |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopTimestampNS", wireType)
			}
			m.StopTimestampNS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StopTimestampNS |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, &TableInfo_ColumnInfo{})
			if err := m.Columns[len(m.Columns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tabletized", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tabletized = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabletizationKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TabletizationKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableInfo_ColumnInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= typespb.DataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatternType", wireType)
			}
			m.PatternType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PatternType |= typespb.PatternType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SemanticType", wireType)
			}
			m.SemanticType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SemanticType |= typespb.SemanticType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComputedSchema) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComputedSchema: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComputedSchema: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tables = append(m.Tables, &TableInfo{})
			if err := m.Tables[len(m.Tables)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableNameToAgentIDs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TableNameToAgentIDs == nil {
				m.TableNameToAgentIDs = make(map[string]*ComputedSchema_AgentIDs)
			}
			var mapkey string
			var mapvalue *ComputedSchema_AgentIDs
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStore
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStore
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthStore
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthStore
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStore
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthStore
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthStore
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ComputedSchema_AgentIDs{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipStore(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthStore
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TableNameToAgentIDs[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComputedSchema_AgentIDs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentIDs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentIDs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentID = append(m.AgentID, &uuidpb.UUID{})
			if err := m.AgentID[len(m.AgentID)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *K8SResource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: K8sResource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: K8sResource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &metadatapb.Pod{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &K8SResource_Pod{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Container", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &metadatapb.ContainerUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &K8SResource_Container{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &metadatapb.Service{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &K8SResource_Service{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &metadatapb.Endpoints{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &K8SResource_Endpoints{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &metadatapb.Namespace{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &K8SResource_Namespace{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &metadatapb.Node{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &K8SResource_Node{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &metadatapb.ReplicaSet{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &K8SResource_ReplicaSet{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deployment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &metadatapb.Deployment{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &K8SResource_Deployment{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *K8SResourceUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: K8sResourceUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: K8sResourceUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Update == nil {
				m.Update = &metadatapb.ResourceUpdate{}
			}
			if err := m.Update.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CronScriptResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CronScriptResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CronScriptResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScriptID == nil {
				m.ScriptID = &uuidpb.UUID{}
			}
			if err := m.ScriptID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &types.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &statuspb.Status{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionTimeNs", wireType)
			}
			m.ExecutionTimeNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionTimeNs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompilationTimeNs", wireType)
			}
			m.CompilationTimeNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompilationTimeNs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesProcessed", wireType)
			}
			m.BytesProcessed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesProcessed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordsProcessed", wireType)
			}
			m.RecordsProcessed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecordsProcessed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStore(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStore
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStore
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStore
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStore
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStore        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStore          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStore = fmt.Errorf("proto: unexpected end of group")
)
